<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Andrey Albershtein</title><link href="https://alberand.com/" rel="alternate"></link><link href="https://alberand.com/feeds/all.atom.xml" rel="self"></link><id>https://alberand.com/</id><updated>2025-06-03T00:00:00+02:00</updated><entry><title>How to restore borg backups?</title><link href="https://alberand.com/how-to-restore-borg.html" rel="alternate"></link><published>2025-06-03T00:00:00+02:00</published><updated>2025-06-03T00:00:00+02:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2025-06-03:/how-to-restore-borg.html</id><summary type="html">&lt;p&gt;I always forget how to restore borg backup. Here are command to do that.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Borg_(backup_software)"&gt;Borg&lt;/a&gt; is pretty good backup solution. I use it with &lt;a href="https://www.borgbase.com/"&gt;BorgBase&lt;/a&gt; to backup my
database for side projects and minecraft world. As Borg does deduplication your
backups won't grow too much leading to huge invoices. The BorgBase is pretty
good and I can recommend it.&lt;/p&gt;
&lt;p&gt;Anyway I always forget how to restore borg backup. Here are command to do that:&lt;/p&gt;
&lt;p&gt;List names of all backups:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b62093a4-6cb3-11f0-8ac6-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b62093a4-6cb3-11f0-8ac6-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;borg&lt;span class="w"&gt; &lt;/span&gt;list&lt;span class="w"&gt; &lt;/span&gt;--format&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{name}{NL}&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ssh://xxxxxxxx@xxxxxxxx.repo.borgbase.com/./repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;If you want just the latest one add --last.&lt;/p&gt;
&lt;p&gt;Find the one you want to restore. They have dates in the name. With BorgBase you
can also find out size change of the backup. &lt;code&gt;borg&lt;/code&gt; also can do this with
&lt;code&gt;{size}&lt;/code&gt; but you need to specify which archive you want it to list.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6209f04-6cb3-11f0-a08b-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6209f04-6cb3-11f0-a08b-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;borg&lt;span class="w"&gt; &lt;/span&gt;extract&lt;span class="w"&gt; &lt;/span&gt;--list&lt;span class="w"&gt; &lt;/span&gt;--progress&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ssh://xxxxxxxx@xxxxxxxx.repo.borgbase.com/./repo::nixxy-borgbase-2025-02-21T00:00:05&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Downloads full backup. It will take time :)&lt;/p&gt;
&lt;p&gt;Test it with &lt;code&gt;--dry-run&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you backup your stuff you probably specified a full path to the files. For
example, I did a backup of &lt;code&gt;/var/lib/minecraft/My World&lt;/code&gt;. By default borg will
create &lt;code&gt;./var/lib/minecraft/My World&lt;/code&gt;. To strip these first 3 directories use
&lt;code&gt;--strip-components 3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To restore specific files or directories:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b620aa76-6cb3-11f0-8695-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b620aa76-6cb3-11f0-8695-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;borg&lt;span class="w"&gt; &lt;/span&gt;extract&lt;span class="w"&gt; &lt;/span&gt;/path/to/repository::archive-name&lt;span class="w"&gt; &lt;/span&gt;path/to/file&lt;span class="w"&gt; &lt;/span&gt;path/to/directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;For extracting only certain file types or using patterns:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b620b5e3-6cb3-11f0-b1cc-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b620b5e3-6cb3-11f0-b1cc-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;borg&lt;span class="w"&gt; &lt;/span&gt;extract&lt;span class="w"&gt; &lt;/span&gt;/path/to/repository::archive-name&lt;span class="w"&gt; &lt;/span&gt;--pattern&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*.jpg&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;--exclude&lt;/code&gt; to skip certain patterns.&lt;/p&gt;</content><category term="Article"></category><category term="borg"></category><category term="backup"></category><category term="restore backup"></category><category term="borg cli"></category></entry><entry><title>Updating and developing NixOS packages</title><link href="https://alberand.com/updating-nixos-packages.html" rel="alternate"></link><published>2025-01-13T00:00:00+01:00</published><updated>2025-01-13T00:00:00+01:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2025-01-13:/updating-nixos-packages.html</id><summary type="html">&lt;p&gt;Short guide on developing and updating NixOS packages in nixpkgs repository&lt;/p&gt;</summary><content type="html">&lt;p&gt;Useful links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nixos.wiki/wiki/Nixpkgs/Create_and_debug_packages"&gt;Very useful guide on Nixos Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unix.stackexchange.com/questions/717168/how-to-package-my-software-in-nix-or-write-my-own-package-derivation-for-nixpkgs"&gt;Good manual on stackexchange.com on creating NixOS package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First of all create your environment&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61ea213-6cb3-11f0-b524-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61ea213-6cb3-11f0-b524-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;git@github.com:NixOS/nixpkgs.git
&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;nixpkgs
&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;update-package
&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;NIXPKGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Build a packages&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61eb253-6cb3-11f0-a580-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61eb253-6cb3-11f0-a580-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix-build&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$NIXPKGS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-k&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;xfsprogs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Run shell with your new updated packages and play around with it to make sure it
works:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61ebec7-6cb3-11f0-848c-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61ebec7-6cb3-11f0-848c-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;nix-shell&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nixpkgs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$NIXPKGS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;xfsprogs
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;mkfs.xfs&lt;span class="w"&gt; &lt;/span&gt;-V
&lt;span class="go"&gt;mkfs.xfs version 6.12.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content><category term="Article"></category><category term="NixOS"></category><category term="package"></category><category term="nix"></category></entry><entry><title>Missing EFI entry for Linux</title><link href="https://alberand.com/missing-efi-entry.html" rel="alternate"></link><published>2024-03-22T00:00:00+01:00</published><updated>2024-03-22T00:00:00+01:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2024-03-22:/missing-efi-entry.html</id><summary type="html">&lt;p&gt;Fixing missing EFI entry for Linux&lt;/p&gt;</summary><content type="html">&lt;p&gt;In dual-booting system or during BIOS update, your EFI entry for booting Linux
can disappear. To boot back into linux you need to get into UEFI shell. The
easiest way is to boot Linux from USB key. Or if you have a fancy motherboard it
can have UEFI shell out of the box as one of the boot options.&lt;/p&gt;
&lt;h1 id="create-linux-usb-key"&gt;Create Linux USB key&lt;/h1&gt;
&lt;p&gt;There's plenty of examples how to do it. I booted into Windows and used
&lt;a href="https://rufus.ie/en/"&gt;Rufus&lt;/a&gt; + &lt;a href="https://archlinux.org/download/"&gt;Arch linux&lt;/a&gt;. Arch already has UEFI shell built in.&lt;/p&gt;
&lt;h1 id="finding-linux-boot"&gt;Finding Linux boot&lt;/h1&gt;
&lt;p&gt;Insert USB drive, change boot priority, boot it. You should see something like
this:&lt;/p&gt;
&lt;p&gt;
&lt;figure class="article-figure"&gt;&lt;img alt="Arch Linux USB key boot menu" src="images/arch-linux-boot-menu.png"&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;After booting into shell you will see device list (all your HDD/SSD/NVME
drives and partitions):&lt;/p&gt;
&lt;p&gt;
&lt;figure class="article-figure"&gt;&lt;img alt="UEFI shell - devices (screenshot taken from Wikipedia)" src="images/UEFI_shell_2.2_screenshot.png"&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Handy commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cls&lt;/code&gt; clears screen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt; lists all devices&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls&lt;/code&gt; lists directory content&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BLK15&lt;/code&gt; goes into this device&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd dir&lt;/code&gt; go to the directory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now quite tedious part. You need to find which devices is the one with Linux. I
have around 7 devices. With all partitions it ended up to be a ~17 different
items.&lt;/p&gt;
&lt;p&gt;Mine was &lt;code&gt;BLK15&lt;/code&gt; duh. To check which one is the one use &lt;code&gt;ls BLK15:&lt;/code&gt; command.
This will list directories and files on the partition/device. You need to find
one which looks like Linux &lt;code&gt;/boot&lt;/code&gt; directory, mine looks like this:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61f18e0-6cb3-11f0-ad35-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61f18e0-6cb3-11f0-ad35-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;nix-shell:~&lt;span class="o"&gt;]&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;tree&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/boot
/boot
├──&lt;span class="w"&gt; &lt;/span&gt;background.png
├──&lt;span class="w"&gt; &lt;/span&gt;converted-font.pf2
├──&lt;span class="w"&gt; &lt;/span&gt;EFI
├──&lt;span class="w"&gt; &lt;/span&gt;grub
├──&lt;span class="w"&gt; &lt;/span&gt;kernels
└──&lt;span class="w"&gt; &lt;/span&gt;loader
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;You should have grub binary in there:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61f2b3e-6cb3-11f0-a2c1-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61f2b3e-6cb3-11f0-a2c1-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Shell&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;BLK15:&lt;span class="se"&gt;\E&lt;/span&gt;FI&lt;span class="se"&gt;\E&lt;/span&gt;FI&lt;span class="se"&gt;\g&lt;/span&gt;rub&lt;span class="se"&gt;\&lt;/span&gt;
grubx64.efi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Typing &lt;code&gt;BLK15:\EFI\EFI\grub\grubx64.efi&lt;/code&gt; will boot you into the grub and
then into your system. &lt;strong&gt;Note!&lt;/strong&gt; this path can be completely different for you.
For example, mine is actually &lt;code&gt;BLK15:\EFI\NixOS-boot\grubx64.efi&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To find out which one is correct - run it. When you find the path which boots
into your system - this is the one.&lt;/p&gt;
&lt;h1 id="creating-efi-entry-to-make-it-permanent"&gt;Creating EFI entry to make it permanent&lt;/h1&gt;
&lt;p&gt;After you found which &lt;code&gt;*.efi&lt;/code&gt; boots your Linux system - boot into the system.
Install &lt;code&gt;efibootmgr&lt;/code&gt; - this utility will make creating EFI entry very easy.&lt;/p&gt;
&lt;p&gt;In your system list disks with &lt;code&gt;lsblk&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61f37e7-6cb3-11f0-9242-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61f37e7-6cb3-11f0-9242-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;nix-shell:~&lt;span class="o"&gt;]&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;lsblk
NAME&lt;span class="w"&gt;          &lt;/span&gt;MAJ:MIN&lt;span class="w"&gt; &lt;/span&gt;RM&lt;span class="w"&gt;   &lt;/span&gt;SIZE&lt;span class="w"&gt; &lt;/span&gt;RO&lt;span class="w"&gt; &lt;/span&gt;TYPE&lt;span class="w"&gt;  &lt;/span&gt;MOUNTPOINTS
...
sdc&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;:32&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;465&lt;/span&gt;.8G&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;disk
├─sdc1&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;:33&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;550M&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;part&lt;span class="w"&gt;  &lt;/span&gt;/boot
└─sdc2&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;:34&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;465&lt;/span&gt;.2G&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;part
&lt;span class="w"&gt;  &lt;/span&gt;└─crypted&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;254&lt;/span&gt;:0&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;465&lt;/span&gt;.2G&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;crypt
&lt;span class="w"&gt;    &lt;/span&gt;├─vg-swap&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;254&lt;/span&gt;:1&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;4G&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;lvm&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;SWAP&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;└─vg-home&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;254&lt;/span&gt;:2&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;461&lt;/span&gt;.2G&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;lvm&lt;span class="w"&gt;   &lt;/span&gt;/var/lib/containers/storage/overlay
&lt;span class="w"&gt;                                         &lt;/span&gt;/export/alberand
&lt;span class="w"&gt;                                         &lt;/span&gt;/nix/store
&lt;span class="w"&gt;                                         &lt;/span&gt;/
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;My system disk looks as above. I have two partitions &lt;code&gt;/dev/sdc1&lt;/code&gt; (or &lt;code&gt;/boot&lt;/code&gt;)
and &lt;code&gt;/dev/sdc2&lt;/code&gt;. The first one has my &lt;code&gt;grubx64.efi&lt;/code&gt;. The second one is LUKS
encrypted &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;/home&lt;/code&gt; of my system.&lt;/p&gt;
&lt;p&gt;To create an EFI boot entry run:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61f59df-6cb3-11f0-b638-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61f59df-6cb3-11f0-b638-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;efibootmgr&lt;span class="w"&gt; &lt;/span&gt;---create&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--disk&lt;span class="w"&gt; &lt;/span&gt;/dev/sdc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--part&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--label&lt;span class="w"&gt; &lt;/span&gt;NixOS&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--loader&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\EFI\NixOS-boot\grubx64.efi&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--disk&lt;/code&gt; is a disk path&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--part&lt;/code&gt; is a partition number on the disk (in my case it's 1)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--label&lt;/code&gt; is just a name which you will see in your BIOS boot menu&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--loader&lt;/code&gt; path to the bootloader (e.g. Grub in my case)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That should be it. Reboot. Set it as default entry and you have it done.&lt;/p&gt;
&lt;h1 id="system-doesnt-boot-grub-rescue"&gt;System doesn't boot, grub rescue&amp;gt;&lt;/h1&gt;
&lt;p&gt;Incorrect &lt;code&gt;--loader&lt;/code&gt; can lead to a broken boot. I faced it when picked the wrong
&lt;code&gt;grubx64.efi&lt;/code&gt; path. This can be debugged in the Grub rescue shell by setting
correct path:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61f68e0-6cb3-11f0-9828-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61f68e0-6cb3-11f0-9828-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# This was wrong path vvv&lt;/span&gt;
grub&lt;span class="w"&gt; &lt;/span&gt;rescue&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;
&lt;span class="nv"&gt;cmdpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\EFI\GRUB\x86_64-efi&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\EFI\GRUB\x86_64-efi&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(hd3,gp1)&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# This how I&amp;#39;ve fixed the path and booted into the system vvv&lt;/span&gt;
grub&lt;span class="w"&gt; &lt;/span&gt;rescue&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;cmdpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\EFI\NixOS-boot&amp;#39;&lt;/span&gt;
grub&lt;span class="w"&gt; &lt;/span&gt;rescue&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\EFI\NixOS-boot&amp;#39;&lt;/span&gt;
grub&lt;span class="w"&gt; &lt;/span&gt;rescue&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;insmod&lt;span class="w"&gt; &lt;/span&gt;normal
grub&lt;span class="w"&gt; &lt;/span&gt;rescue&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;normal
booting...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Then, after booting into your system, change the path to correct one with
&lt;code&gt;efibootmgr&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;efibootmgr --delete-bootnum --bootnum 2&lt;/code&gt; to delete wrong entry at index
0002.&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rufus.ie/en/"&gt;Rufus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://archlinux.org/download/"&gt;Arch Linux Download&lt;/a&gt; - scroll down and pick one of the mirrors, closest to
  you, or use torrents&lt;/li&gt;
&lt;/ul&gt;</content><category term="Article"></category><category term="linux"></category><category term="boot"></category><category term="grub"></category><category term="efibootmgr"></category><category term="bios"></category><category term="nixos"></category></entry><entry><title>Prague Yellow Line Walk</title><link href="https://alberand.com/prague-yellow-line.html" rel="alternate"></link><published>2023-12-18T00:00:00+01:00</published><updated>2023-12-18T00:00:00+01:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2023-12-18:/prague-yellow-line.html</id><summary type="html">&lt;p&gt;How I walked along Prague's Yellow Metro Line in a day&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quite often I like to walk from Zličín to Nové Butovice. This path has a really
nice part starting somewhere on Stodůlky up until Nové Butovice. This is A
bicycle path.&lt;/p&gt;
&lt;p&gt;A few times I went to Anděl and even Národní třída. I though - well, can I go up
to Černý Most? Can I walk the whole yellow metro line?&lt;/p&gt;
&lt;p&gt;So, on Saturday 18th November I decided to go. I took:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bottle of water,&lt;/li&gt;
&lt;li&gt;headphones,&lt;/li&gt;
&lt;li&gt;fully charged phone,&lt;/li&gt;
&lt;li&gt;list of podcast episodes to listen,&lt;/li&gt;
&lt;li&gt;&lt;img width="16px" src="../static/prague-yellow-line/mapycz-icon.png"&gt; &lt;a href="https://play.google.com/store/apps/details?id=cz.seznam.mapy"&gt;mapy.cz&lt;/a&gt; app,
  with downloaded Prague map, to track my walk&lt;/li&gt;
&lt;li&gt;a few medical patches in case of blister,&lt;/li&gt;
&lt;li&gt;and two apples to eat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I went without any stops (except traffic lights) for &lt;strong&gt;5 hours 58 minutes&lt;/strong&gt; in
total covering &lt;strong&gt;27.8 km&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
    crossorigin=""/&gt;&lt;/p&gt;
&lt;script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
    crossorigin=""&gt;&lt;/script&gt;
&lt;div id="max-container"&gt;
    &lt;div id="map"&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Google Fit says that over this walk I spent &lt;code&gt;~1600 calories&lt;/code&gt; which is
incredible. I calculated that I need about 2000 to 2300 calories to stay in the
current weight. So, 1600 is more than 2/3 of my daily needs.&lt;/p&gt;
&lt;p&gt;Somewhere near Radlická I started feeling some muscles wanting to rest. Passing
Vysočanská my legs were really hurting and I was thinking about making a short
stop, but it wasn't thaaat bad. Of course, all of that was only muscle pain, no
joints or strange unpleasant feelings.&lt;/p&gt;
&lt;p&gt;Overall, this was an interesting experience. Now I thinking about going along
Green and Red lines; both of them are shorter. In terms of joy, I think it's too
long. My mind was really enjoying first 2 hours of the walk but then I needed to
focus much more than is pleasant for a walk. I blame it on the fact that in
about 2 hours I got to the city center, where I had to be careful in the crowd
and is that muscle pain become really noticeable which quite destructing.&lt;/p&gt;
&lt;style&gt;
#max-container {
    max-width: 1150px;
    margin-bottom: 20px;
    max-height: 500px;
    height: 500px;
    overflow: hidden;
}

#map {
    width: 100%;
    height: 500px;
}

.leaflet-control-attribution {
    display: none;
}

.leaflet-container {
    background-color:rgba(255,0,0,0.0);
}

.leaflet-layer {
    filter: brightness(0.6) invert(1) contrast(3) hue-rotate(200deg) saturate(0.3) brightness(0.7);
}

.leaflet-popup {
    margin-bottom: 10px;
}

.leaflet-popup-tip-container {
    display: none;
}

.leaflet-popup-content-wrapper {
    background: transparent;
    box-shadow: none;
}

.leaflet-popup-close-button {
    display: none;
}

.leaflet-popup-content {
    margin: 0;
}

#popup {
    --gap: 5px;
    --border-size: 1px;
    --width: 200px;
    --text-color: #ff6204;
    --background: #282c35;
    max-width: 100vw;
    border-radius: var(--gap);
    box-shadow: var(--gap) var(--text-color);
    display:nnone;
}

#popup a {
    text-decoration: none;
    color: var(--text-color);
}

#popup-figure {
    width: 100%;
    margin: 0;
}

#popup-image {
    border: var(--border-size) solid var(--background);
    border-top-left-radius: var(--gap);
    border-top-right-radius: var(--gap);
    box-sizing: border-box;
    max-width: var(--width);
    max-height: var(--width);
    width: 100%;
    height: auto;
}

#popup-figcaption {
    border: var(--border-size) solid var(--background);
    max-width: var(--width);
    box-sizing: border-box;
    padding: var(--gap);
    font-family: "Sans Serif";
    background-color: var(--background);
    border-bottom-left-radius: var(--gap);
    border-bottom-right-radius: var(--gap);
}

.leaflet-marker-icon {
  background: #ff6204;
  box-shadow: black 0px 0px 2px;
  padding: 0px 1px !important;
  border-radius: 5px;
}

path.leaflet-interactive:nth-child(1) {
  filter: drop-shadow(0px 0px 2px rgb(0 0 0 / 0.4));
}

path.leaflet-interactive:nth-child(2) {
  filter: drop-shadow(0px 0px 2px rgb(0 0 0 / 0.4));
}

&lt;/style&gt;
&lt;script&gt;
  // Create Map instance
  var map = L.map('map', {
    zoomSnap: 0.1,
    zoomDelta: 0.1,
    zoomControl: false
  }).setView([50.080786, 14.428592], 12);

  setTimeout(function(){ map.invalidateSize()}, 400);

  // Add tile layer to the map
  L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '',
  }).addTo(map);

  // Load and add track to the map
  // TODO remove ../ when published!
  function addTrack() {
    fetch("static/prague-yellow-line/tracks.geojson")
    .then(response =&gt; response.json())
    .then(json =&gt; {
        route = L.geoJSON(json, {
          style: function (feature) {
              return { color: "#ff6204" };
          }
        })
        map.fitBounds(route.getBounds().pad(0.01))
        route.addTo(map)
      }
    );
  }

  fetch("static/prague-yellow-line/yellow-line.geojson")
  .then(response =&gt; response.json())
  .then(json =&gt; {
      route = L.geoJSON(json, {
        style: function (feature) {
            return {color: "#eec331"};
        }
      })
      route.addTo(map)
      addTrack()
    }
  );

  // Add images to the map
  function addImage(image, msg) {
      var metadata = fetch(image + ".json")
        .then(response =&gt; response.json())
        .then(json =&gt; {
            json = json[0];
            var latlng = [parseFloat(json["GPSLatitude"]),
                        parseFloat(json["GPSLongitude"])];

    var photoIcon = L.icon({
        iconUrl: 'static/prague-yellow-line/photo_icon.png',
        iconSize:     [24, 24], // size of the icon
        iconAnchor:   [12, 12], // point of the icon which will correspond to marker's location
        popupAnchor:  [12, -12] // point from which the popup should open relative to the iconAnchor
    });

    var marker = L.marker(latlng, {icon: photoIcon})
        .addTo(map);

    var popupContent = `
    &lt;div id="popup"&gt;
      &lt;a href="${image}"&gt;
        &lt;figure id="popup-figure"&gt;
          &lt;img id="popup-image" src="${image}.thumb"&gt;
          &lt;figcaption id="popup-figcaption"&gt;
            ${msg}
          &lt;/figcaption&gt;
        &lt;/figure&gt;
      &lt;/a&gt;
    &lt;/div&gt;
    `

    var popup = L.popup()
        .setLatLng(latlng)
        .setContent(popupContent);

    marker.bindPopup(popup);
        });


  }

    var arrowIcon = L.icon({
        iconUrl: 'static/prague-yellow-line/arrow.png',
        iconSize:     [124, 124], // size of the icon
        iconAnchor:   [62, 62], // point of the icon which will correspond to marker's location
        popupAnchor:  [12, -12] // point from which the popup should open relative to the iconAnchor
    });
    var coords = L.latLng(0, 0);
    L.marker(coords, {icon: arrowIcon}).addTo(map);
    L.marker(coords, {
        icon: L.divIcon({
            html: "Null Island",
            className: 'text-below-marker',
        })
    }).addTo(map);

  addImage('static/prague-yellow-line/andel_river_repairs.jpg',
            'Repair works on the Vltava\'s weir')
  addImage('static/prague-yellow-line/andel_river_repairs_2.jpg',
            'Repair works on the Vltava\'s weir from other spot')
  addImage('static/prague-yellow-line/cerny_most_station.jpg',
            'Inside of Černý Most station')
  addImage('static/prague-yellow-line/cerny_most_yellow_path.jpg',
            'Almost there!')
  addImage('static/prague-yellow-line/invalidovna_hands.jpg',
            'The building with hands designed by David Černý')
  addImage('static/prague-yellow-line/invalidovna_woman.jpg',
            'Woman by David Černý. So cool!')
  addImage('static/prague-yellow-line/krizikova.jpg',
            'Just an entrance to the Křižíkova station')
  addImage('static/prague-yellow-line/rajska_zahrada_yellow_path.jpg',
            'Really great walk/bike path on top of the metro (rather Soviet style)')

&lt;/script&gt;</content><category term="Article"></category><category term="sport"></category><category term="prague"></category><category term="yellow line"></category></entry><entry><title>NixOS Wireguard VPN setup</title><link href="https://alberand.com/nixos-wireguard-vpn.html" rel="alternate"></link><published>2023-12-11T00:00:00+01:00</published><updated>2023-12-11T00:00:00+01:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2023-12-11:/nixos-wireguard-vpn.html</id><summary type="html">&lt;p&gt;Let's configure wireguard VPN on NixOS with a kill-switch&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I finally decided to configure VPN for my main machine. My choice fell
on Mullvad VPN. They are amazing, they don't even need your email for an account.&lt;/p&gt;
&lt;p&gt;This guide is for configuring Wireguard tunnel using Mullvad VPN servers, but
you can apply this configuration to any Wireguard VPN.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://nixos.wiki/wiki/WireGuard"&gt;NixOS wiki&lt;/a&gt; provides a starting ground for running Wireguard tunnel. The
wiki has multiple example with &lt;code&gt;networking.wireguard&lt;/code&gt;, &lt;code&gt;networking.wg-quick&lt;/code&gt; and
&lt;code&gt;systemd-networkd&lt;/code&gt; for both server and client. Moreover you can find
&lt;a href="https://search.nixos.org/packages?show=mullvad-vpn&amp;amp;type=packages&amp;amp;query=mullvad"&gt;mullvad-vpn app&lt;/a&gt; and configure VPN through the clean GUI, but it will not be
declarative (not in your &lt;code&gt;configuration.nix&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I &lt;strong&gt;recommend&lt;/strong&gt; going with &lt;code&gt;networking.wg-quick&lt;/code&gt; as it's probably the easiest one.&lt;/p&gt;
&lt;p&gt;First of all, let's create a separate file, so it won't be a problem in the
future to use this module on another machine.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6401b51-6cb3-11f0-8a5b-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6401b51-6cb3-11f0-8a5b-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# modules/wireguard.nix&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; pkgs&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Don't forget to add this file to the &lt;code&gt;imports&lt;/code&gt; list in the &lt;code&gt;configuration.nix&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6402833-6cb3-11f0-aeea-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6402833-6cb3-11f0-aeea-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; config&lt;span class="p"&gt;,&lt;/span&gt; pkgs&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;imports =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/hardware-configuration.nix&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/modules/wireguard.nix&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;In that file copy-paste the same configuration suggested in wiki's "Client"
section:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b64036d1-6cb3-11f0-8aad-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b64036d1-6cb3-11f0-8aad-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; pkgs&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  networking&lt;span class="o"&gt;.&lt;/span&gt;wg-quick&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;interfaces =&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt;
    &lt;span class="ss"&gt;server_ip =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;18.19.23.66&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;wg0 =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;# IP address of this machine in the *tunnel network*&lt;/span&gt;
      &lt;span class="ss"&gt;address =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;10.64.186.60/32&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;fdc9:281f:04d7:9ee9::2/64&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;];&lt;/span&gt;

      &lt;span class="c1"&gt;# To match firewall allowedUDPPorts (without this wg&lt;/span&gt;
      &lt;span class="c1"&gt;# uses random port numbers).&lt;/span&gt;
      &lt;span class="ss"&gt;listenPort =&lt;/span&gt; &lt;span class="mi"&gt;51820&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;# Path to the private key file.&lt;/span&gt;
      &lt;span class="ss"&gt;privateKeyFile =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/etc/mullvad-vpn.key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="ss"&gt;peers =&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="ss"&gt;publicKey =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1493vtFUbIfSpQKRBki/1d0YgWIQwMV4AQAvGxjCNVM=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="ss"&gt;allowedIPs =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.0.0.0/0&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="ss"&gt;endpoint =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;server_ip&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:51820&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="ss"&gt;persistentKeepalive =&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}];&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;On Mullvad website go to "WireGuard configuration" in the left sidebar. Pick
country, server, port and any content blockers you wish, enable killswitch
checkbox. Download &lt;code&gt;*.conf&lt;/code&gt; file, mine is &lt;code&gt;dk-cph-wg-401.conf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6406e2c-6cb3-11f0-adc3-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6406e2c-6cb3-11f0-adc3-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Interface]&lt;/span&gt;
&lt;span class="c1"&gt;# Device: Fast Basset&lt;/span&gt;
&lt;span class="na"&gt;PrivateKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;SL/xaxaFRogeNoDOOontGolvdIJ5x8mgLw0U/+1McG4=&lt;/span&gt;
&lt;span class="na"&gt;Address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;10.75.130.74/32,fc00:bbbb:bbbb:bb01::4:be49/128&lt;/span&gt;
&lt;span class="na"&gt;DNS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;100.64.0.3&lt;/span&gt;
&lt;span class="na"&gt;PostUp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;iptables -I OUTPUT ! -o %i -m mark ! --mark $(wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT &amp;amp;&amp;amp; ip6tables -I OUTPUT ! -o %i -m mark ! --mark $(wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT&lt;/span&gt;
&lt;span class="na"&gt;PreDown&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;iptables -D OUTPUT ! -o %i -m mark ! --mark $(wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT &amp;amp;&amp;amp; ip6tables -D OUTPUT ! -o %i -m mark ! --mark $(wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT&lt;/span&gt;

&lt;span class="k"&gt;[Peer]&lt;/span&gt;
&lt;span class="na"&gt;PublicKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;Jjml2TSqKlgzW6UzPiJszaun743QYpyl5jQk8UOQYg0=&lt;/span&gt;
&lt;span class="na"&gt;AllowedIPs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;0.0.0.0/0,::0/0&lt;/span&gt;
&lt;span class="na"&gt;Endpoint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;146.70.197.194:51820&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id="private-vpn-configuration-files"&gt;Private VPN configuration files&lt;/h1&gt;
&lt;p&gt;We can not put Mullvad VPN configuration file to the Nix configuration directly.
The &lt;code&gt;dk-cph-wg-401.conf&lt;/code&gt; contains private key which should not be shared.
&lt;code&gt;/nix/store&lt;/code&gt; is world readable, by putting this file in the &lt;code&gt;*.nix&lt;/code&gt; any system
user would be able to read your private key.&lt;/p&gt;
&lt;p&gt;Let's put private key to the &lt;code&gt;/etc/mullvad-vpn.key&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6407fcf-6cb3-11f0-8dbb-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6407fcf-6cb3-11f0-8dbb-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat&lt;span class="w"&gt; &lt;/span&gt;dk-cph-wg-401.conf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PrivateKey&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{ print $3 }&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;tee&lt;span class="w"&gt; &lt;/span&gt;/etc/mullvad-vpn.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Let's make it readable only by the owner (root):&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6408e7d-6cb3-11f0-8a11-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6408e7d-6cb3-11f0-8a11-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;chmod&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/etc/mullvad-vpn.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id="copy-configuration-from-dk-cph-wg-401conf-to-moduleswireguardnix"&gt;Copy configuration from &lt;code&gt;dk-cph-wg-401.conf&lt;/code&gt; to &lt;code&gt;modules/wireguard.nix&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Now you need to copy values from Mullvad config to Nix configuration. Each
parameter has a comment above it describing corresponding item in Mullvad's
&lt;code&gt;dk-cph-wg-401.conf&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6409b5a-6cb3-11f0-ab7a-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6409b5a-6cb3-11f0-ab7a-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; pkgs&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  networking&lt;span class="o"&gt;.&lt;/span&gt;wg-quick&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;interfaces =&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt;
    &lt;span class="c1"&gt;# [Peer] section -&amp;gt; Endpoint&lt;/span&gt;
    &lt;span class="ss"&gt;server_ip =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;18.19.23.66&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;wg0 =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;# [Interface] section -&amp;gt; Address&lt;/span&gt;
      &lt;span class="ss"&gt;ips =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10.75.130.74/32&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

      &lt;span class="c1"&gt;# [Peer] section -&amp;gt; Endpoint:port&lt;/span&gt;
      &lt;span class="ss"&gt;listenPort =&lt;/span&gt; &lt;span class="mi"&gt;51820&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;# Path to the private key file.&lt;/span&gt;
      &lt;span class="ss"&gt;privateKeyFile =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/etc/mullvad-vpn.key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="ss"&gt;peers =&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="c1"&gt;# [Peer] section -&amp;gt; PublicKey&lt;/span&gt;
        &lt;span class="ss"&gt;publicKey =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1493vtFUbIfSpQKRBki/1d0YgWIQwMV4AQAvGxjCNVM=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;# [Peer] section -&amp;gt; AllowedIPs&lt;/span&gt;
        &lt;span class="ss"&gt;allowedIPs =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.0.0.0/0&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="c1"&gt;# [Peer] section -&amp;gt; Endpoint:port&lt;/span&gt;
        &lt;span class="ss"&gt;endpoint =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;server_ip&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:51820&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="ss"&gt;persistentKeepalive =&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}];&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Now, open Wireguard port, if your are using firewall:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b640bc68-6cb3-11f0-aaa1-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b640bc68-6cb3-11f0-aaa1-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;networking&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;firewall =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;allowedUDPPorts =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;config&lt;span class="o"&gt;.&lt;/span&gt;networking&lt;span class="o"&gt;.&lt;/span&gt;wg-quick&lt;span class="o"&gt;.&lt;/span&gt;interfaces&lt;span class="o"&gt;.&lt;/span&gt;wg0&lt;span class="o"&gt;.&lt;/span&gt;listenPort&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Done! That's enough to have a VPN tunnel. But, to be on a safe side you need a
killswitch. The killswitch is a network filter which allows traffic to go only
through VPN, without VPN all the trafic is blocked. So, when VPN tunnel suddenly
goes down you won't expose your real IP address.&lt;/p&gt;
&lt;h1 id="killswitch-all-traffic-through-vpn"&gt;Killswitch! All traffic through VPN&lt;/h1&gt;
&lt;p&gt;If you enabled killswitch checkbox on Mullvad's configuration page, then, your
*.conf file will have &lt;code&gt;PostUp&lt;/code&gt; and &lt;code&gt;PreDown&lt;/code&gt; fields. These are shell commands
run before and after VPN is started/stopped.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b640caf2-6cb3-11f0-a895-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b640caf2-6cb3-11f0-a895-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;PostUp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;iptables -I OUTPUT ! -o %i -m mark ! --mark $(wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT &amp;amp;&amp;amp; ip6tables -I OUTPUT ! -o %i -m mark ! --mark $(wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT&lt;/span&gt;
&lt;span class="na"&gt;PreDown&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;iptables -D OUTPUT ! -o %i -m mark ! --mark $(wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT &amp;amp;&amp;amp; ip6tables -D OUTPUT ! -o %i -m mark ! --mark $(wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;In my config, Wireguard runs &lt;code&gt;iptables&lt;/code&gt; to tell network stack that any packet
which does not go through &lt;strong&gt;wg0&lt;/strong&gt; interface should be REJECTed. &lt;code&gt;iptables&lt;/code&gt; is
utility used to create network filters. Now copy those rules to the &lt;code&gt;postUp&lt;/code&gt; and
&lt;code&gt;postDown&lt;/code&gt; parametrs in &lt;code&gt;modules/wireguard.nix&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b640d929-6cb3-11f0-9911-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b640d929-6cb3-11f0-9911-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ss"&gt;postUp =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;  # Mark packets on the wg0 interface&lt;/span&gt;
&lt;span class="s1"&gt;  wg set wg0 fwmark 51820&lt;/span&gt;

&lt;span class="s1"&gt;  # Forbid anything else which doesn&amp;#39;t go through wireguard VPN on&lt;/span&gt;
&lt;span class="s1"&gt;  # ipV4 and ipV6&lt;/span&gt;
&lt;span class="s1"&gt;  &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pkgs&lt;span class="o"&gt;.&lt;/span&gt;iptables&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/bin/iptables -A OUTPUT \&lt;/span&gt;
&lt;span class="s1"&gt;    ! -d 192.168.0.0/16 \&lt;/span&gt;
&lt;span class="s1"&gt;    ! -o wg0 \&lt;/span&gt;
&lt;span class="s1"&gt;    -m mark ! --mark $(wg show wg0 fwmark) \&lt;/span&gt;
&lt;span class="s1"&gt;    -m addrtype ! --dst-type LOCAL \&lt;/span&gt;
&lt;span class="s1"&gt;    -j REJECT&lt;/span&gt;
&lt;span class="s1"&gt;  &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pkgs&lt;span class="o"&gt;.&lt;/span&gt;iptables&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/bin/ip6tables -A OUTPUT \&lt;/span&gt;
&lt;span class="s1"&gt;    ! -o wg0 \&lt;/span&gt;
&lt;span class="s1"&gt;    -m mark ! --mark $(wg show wg0 fwmark) \&lt;/span&gt;
&lt;span class="s1"&gt;    -m addrtype ! --dst-type LOCAL \&lt;/span&gt;
&lt;span class="s1"&gt;    -j REJECT&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Note that Nix configuration has a few differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a full path to any utility &lt;code&gt;${pkgs.iptables}/bin/iptables&lt;/code&gt; instead of just
  &lt;code&gt;iptables&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;to mark all network packets going through wg0 interface &lt;code&gt;wg set wg0 fwmark
  51820&lt;/code&gt; command is needed. This is probably necessary to not create a closed
  loop in the filter.&lt;/li&gt;
&lt;li&gt;Wireguard interface is directly specified as &lt;code&gt;wg0&lt;/code&gt;. Nix module does not
  currently pass any parameters to those commands, general &lt;code&gt;%i&lt;/code&gt; replacement can
  not be used&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Same for &lt;code&gt;PreDown&lt;/code&gt; -&amp;gt; &lt;code&gt;postDown&lt;/code&gt; conversion:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b640e96e-6cb3-11f0-b1ff-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b640e96e-6cb3-11f0-b1ff-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ss"&gt;postDown =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;  &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pkgs&lt;span class="o"&gt;.&lt;/span&gt;iptables&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/bin/iptables -D OUTPUT \&lt;/span&gt;
&lt;span class="s1"&gt;    ! -o wg0 \&lt;/span&gt;
&lt;span class="s1"&gt;    -m mark ! --mark $(wg show wg0 fwmark) \&lt;/span&gt;
&lt;span class="s1"&gt;    -m addrtype ! --dst-type LOCAL \&lt;/span&gt;
&lt;span class="s1"&gt;    -j REJECT&lt;/span&gt;
&lt;span class="s1"&gt;  &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pkgs&lt;span class="o"&gt;.&lt;/span&gt;iptables&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/bin/ip6tables -D OUTPUT \&lt;/span&gt;
&lt;span class="s1"&gt;    ! -o wg0 -m mark \&lt;/span&gt;
&lt;span class="s1"&gt;    ! --mark $(wg show wg0 fwmark) \&lt;/span&gt;
&lt;span class="s1"&gt;    -m addrtype ! --dst-type LOCAL \&lt;/span&gt;
&lt;span class="s1"&gt;    -j REJECT&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id="exclude-trafficportip-from-vpn"&gt;Exclude traffic/port/IP from VPN&lt;/h1&gt;
&lt;p&gt;Local network application don't need VPN. We can exclude particular IP
addresses or ports. For example to exclude &lt;code&gt;kdeconnect&lt;/code&gt; ports (range 1714-1764
for UDP and TCP) from VPN add the following &lt;code&gt;iptables&lt;/code&gt; rules into &lt;code&gt;postUp&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b640f756-6cb3-11f0-bd40-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b640f756-6cb3-11f0-bd40-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Accept kdeconnect connections&lt;/span&gt;
&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pkgs&lt;/span&gt;&lt;span class="p"&gt;.iptables&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin/iptables&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;INPUT&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;wg0&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;udp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--dport&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1714&lt;/span&gt;:1764&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;state&lt;span class="w"&gt; &lt;/span&gt;--state&lt;span class="w"&gt; &lt;/span&gt;NEW,ESTABLISHED&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;ACCEPT
&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pkgs&lt;/span&gt;&lt;span class="p"&gt;.iptables&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin/iptables&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;INPUT&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;wg0&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;tcp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--dport&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1714&lt;/span&gt;:1764&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;state&lt;span class="w"&gt; &lt;/span&gt;--state&lt;span class="w"&gt; &lt;/span&gt;NEW,ESTABLISHED&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;ACCEPT
&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pkgs&lt;/span&gt;&lt;span class="p"&gt;.iptables&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin/iptables&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;OUTPUT&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;wg0&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;udp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--sport&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1714&lt;/span&gt;:1764&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;state&lt;span class="w"&gt; &lt;/span&gt;--state&lt;span class="w"&gt; &lt;/span&gt;NEW,ESTABLISHED&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;ACCEPT
&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pkgs&lt;/span&gt;&lt;span class="p"&gt;.iptables&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin/iptables&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;OUTPUT&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;wg0&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;tcp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--sport&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1714&lt;/span&gt;:1764&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;state&lt;span class="w"&gt; &lt;/span&gt;--state&lt;span class="w"&gt; &lt;/span&gt;NEW,ESTABLISHED&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;To exclude local port (in this case Deluge web client is running in container on
port 8112):&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6411bcd-6cb3-11f0-91d7-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6411bcd-6cb3-11f0-91d7-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Allow deluge web gui&lt;/span&gt;
&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pkgs&lt;/span&gt;&lt;span class="p"&gt;.iptables&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin/iptables&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;OUTPUT&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;lo&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;tcp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--dport&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8112&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;state&lt;span class="w"&gt; &lt;/span&gt;--state&lt;span class="w"&gt; &lt;/span&gt;NEW,ESTABLISHED&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Another example is to exclude subnet for Nix containers (container has IP of
10.233.1.2 and host 10.233.1.1):&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6412ce1-6cb3-11f0-930e-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6412ce1-6cb3-11f0-930e-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pkgs&lt;/span&gt;&lt;span class="p"&gt;.iptables&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin/iptables&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;OUTPUT&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.233.1.0/24&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.233.1.0/24&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id="split-tunnel"&gt;Split Tunnel&lt;/h1&gt;
&lt;p&gt;Ok, but what if I want to route some traffic through the Wireguard and other
traffic through other tunnel. For example, I have a company VPN which is needed
for work. There is a way.&lt;/p&gt;
&lt;p&gt;In this section I will describe how to add OpenVPN tunnel in addition to setup
above. With the tunnel my machine would be connected to another subnet without
going through Wireguard tunnel.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First of all&lt;/strong&gt;, killswitch/iptables needs to know that traffic going to
OpenVPN subnet should not be rejected. To accept new connection add these rules:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6413c71-6cb3-11f0-af77-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6413c71-6cb3-11f0-af77-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pkgs&lt;/span&gt;&lt;span class="p"&gt;.iptables&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin/iptables&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;INPUT&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;.29.79.10&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;.168.0.100&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;state&lt;span class="w"&gt; &lt;/span&gt;--state&lt;span class="w"&gt; &lt;/span&gt;NEW,ESTABLISHED&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;ACCEPT
&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pkgs&lt;/span&gt;&lt;span class="p"&gt;.iptables&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin/iptables&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;OUTPUT&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;.168.0.100&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;.29.79.10&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;state&lt;span class="w"&gt; &lt;/span&gt;--state&lt;span class="w"&gt; &lt;/span&gt;NEW,ESTABLISHED&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;19.29.79.10&lt;/code&gt; is IP of OpenVPN endpoint/server&lt;/li&gt;
&lt;li&gt;&lt;code&gt;192.168.0.100&lt;/code&gt; is IP of this machine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that I explicitly specified source &lt;code&gt;-s&lt;/code&gt; and &lt;code&gt;-d&lt;/code&gt; destination IPs instead of
subnets. In my case I want node to node connection. For subnets IP mask need to
be used &lt;code&gt;/32&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Next&lt;/strong&gt;, obtain your OpenVPN configuration file &lt;code&gt;*.ovpn&lt;/code&gt;. This file is also
&lt;strong&gt;secret&lt;/strong&gt; and can not be shared, so, don't put it into Nix configuration. Copy
it somewhere in your system.&lt;/p&gt;
&lt;p&gt;I copied mine into &lt;code&gt;/etc/openvpn/jellyfin-tunnel.ovpn&lt;/code&gt;. Also, as system already
has VPN, OpenVPN needs to know that it should not route all the traffic through
itself. Usually it does it with a network route. To tell OpenVPN not to create a
global route add following line to your &lt;code&gt;*.ovpn&lt;/code&gt; config:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6415554-6cb3-11f0-af86-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6415554-6cb3-11f0-af86-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pull-filter ignore redirect-gateway
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;That's all for preparations phase, now let's create the tunnel in the system:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6416084-6cb3-11f0-87a3-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6416084-6cb3-11f0-87a3-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# MANUAL ACTIONS ARE REQUIRED!&lt;/span&gt;
&lt;span class="c1"&gt;# - Copy your VPN configuration to /etc/openvpn/jellyfin-tunnel.ovpn&lt;/span&gt;
&lt;span class="c1"&gt;# - Add following line to /etc/openvpn/jellyfin-tunnel.ovpn&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#     pull-filter ignore redirect-gateway&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#   This means that OpenVPN won&amp;#39;t create route which routes all the&lt;/span&gt;
&lt;span class="c1"&gt;#   traffic through OpenVPN tunnel.&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; config&lt;span class="p"&gt;,&lt;/span&gt; pkgs&lt;span class="p"&gt;,&lt;/span&gt; lib&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  networking&lt;span class="o"&gt;.&lt;/span&gt;dhcpcd&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;runHook =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;    &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pkgs&lt;span class="o"&gt;.&lt;/span&gt;iproute2&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/bin/ip route add 19.29.79.10 via 192.168.0.1 dev enp34s0&lt;/span&gt;
&lt;span class="s1"&gt;  &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  users&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;users =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;openvpn =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;openvpn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;group =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;openvpn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;isNormalUser =&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;uid =&lt;/span&gt; &lt;span class="mi"&gt;1100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  users&lt;span class="o"&gt;.&lt;/span&gt;groups&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;openvpn =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;openvpn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;members =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;openvpn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="ss"&gt;gid =&lt;/span&gt; &lt;span class="mi"&gt;1100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;# Configure our OpenVPN client&lt;/span&gt;
  services&lt;span class="o"&gt;.&lt;/span&gt;openvpn&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;servers =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;jellyfin =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;config =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;config /etc/openvpn/jellyfin-tunnel.ovpn&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;autoStart =&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Here, new network route is created to route all the traffic addressed to OpenVPN
endpoint &lt;code&gt;19.29.79.10&lt;/code&gt; through LAN gateway &lt;code&gt;192.168.0.1&lt;/code&gt; (e.g. WiFi router).
This is needed as without the route OpenVPN client will try to reach endpoint
through Wireguard tunnel, which won't work (not sure why).&lt;/p&gt;
&lt;p&gt;Then, new &lt;code&gt;openvpn&lt;/code&gt; user and group are created with specific UID/GID. Specific
UID/GID could be anything or you can even left it out. I like to specify user ID
as then it's convenient in places where ID instead of name is used.&lt;/p&gt;
&lt;p&gt;Finally, config declares OpenVPN connection with name &lt;code&gt;openvpn-jellyfin&lt;/code&gt;. This
name is used as a systemd's service name. You can check status of your VPN
tunnel with:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6418048-6cb3-11f0-9cd2-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6418048-6cb3-11f0-9cd2-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;status&lt;span class="w"&gt; &lt;/span&gt;openvpn-jellyfin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Enabling/Disabling &lt;code&gt;autoStart&lt;/code&gt; is straightforward. Otherwise, you can start your
tunnel with systemd:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6418c5b-6cb3-11f0-bb35-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6418c5b-6cb3-11f0-bb35-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;start&lt;span class="w"&gt; &lt;/span&gt;openvpn-jellyfin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id="i-want-to-use-networkingwireguard"&gt;I want to use &lt;code&gt;networking.wireguard&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;This was my initial approach and there's two additional things to handle:&lt;/p&gt;
&lt;h2 id="additional-ip-route"&gt;Additional IP route&lt;/h2&gt;
&lt;p&gt;As configuration specifies &lt;code&gt;allowedIPs = 0.0.0.0/0&lt;/code&gt; all connection on &lt;code&gt;wg0&lt;/code&gt;
interface will be routed through VPN tunnel. This creates a routing issue as
Wireguard needs to connect to endpoint via public network.&lt;/p&gt;
&lt;p&gt;To do so, create a new route to tell network stack to route traffic going to
endpoint IP (18.19.23..) through main gateway (192.168.0.1 is my WiFi router):&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6419950-6cb3-11f0-9487-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6419950-6cb3-11f0-9487-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;networking&lt;span class="o"&gt;.&lt;/span&gt;dhcpcd&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;runHook =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;  &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;pkgs&lt;span class="o"&gt;.&lt;/span&gt;iproute2&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/bin/ip route add 18.19.23.66/32 via 192.168.0.1 dev enp34s0&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;You can create the route with &lt;code&gt;networking.interfaces&lt;/code&gt; but it will not work just
like that! The route will be flushed on suspend.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b641a804-6cb3-11f0-8b9d-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b641a804-6cb3-11f0-8b9d-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;networking&lt;span class="o"&gt;.&lt;/span&gt;interfaces&lt;span class="o"&gt;.&lt;/span&gt;enp34s0&lt;span class="o"&gt;.&lt;/span&gt;ipv4&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;routes =&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="ss"&gt;address =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;18.19.23.66&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;prefixLength =&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;via =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;192.168.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id="wireguard-vpn-doesnt-work-after-suspendsleep"&gt;Wireguard VPN doesn't work after suspend/sleep&lt;/h2&gt;
&lt;p&gt;Unfortunately, &lt;code&gt;dhcpcd&lt;/code&gt; will not re-create an additional route created via
&lt;code&gt;networking.interfaces&lt;/code&gt;. There is similar problem described at &lt;a href="https://wiki.archlinux.org/title/WireGuard#Connection_lost_after_sleep_using_systemd-networkd"&gt;Arch Wiki&lt;/a&gt;,
but I don't use &lt;code&gt;systemd-networkd&lt;/code&gt; so the solution suggested doesn't apply.&lt;/p&gt;
&lt;p&gt;As &lt;code&gt;dhcpcd&lt;/code&gt; will remove all routes on wake-up, Wireguard will fail to connect to
the endpoint. On my system &lt;code&gt;dhcpcd.service&lt;/code&gt; creates all necessary IP routes. But
the one necessary for Wireguard is created by
&lt;code&gt;network-addresses-enp34s0.service&lt;/code&gt;. This service doesn't restart after suspend.&lt;/p&gt;
&lt;p&gt;Note that by using &lt;code&gt;networking.dhcpcd.runHook&lt;/code&gt; this problem is solved as route
is created by &lt;code&gt;dhcpcd&lt;/code&gt; itself.&lt;/p&gt;
&lt;p&gt;To make it work without &lt;code&gt;dhcpcd&lt;/code&gt; hook, I decided to go with easy fix by
restarting the VPN service after network is established. To do so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add a services for restarting address obtaining for network interface,&lt;/li&gt;
&lt;li&gt;then make it sleep a little (waiting for dhcpcd set things up),&lt;/li&gt;
&lt;li&gt;and make Wireguard service dependable on this all.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href="/materials/nixos-wireguard-vpn-snippet.nix"&gt;this code snippet&lt;/a&gt; for doing this in code.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;suspend-restart&lt;/code&gt; also creates route as described in &lt;a href="#additional-ip-route"&gt;Additional IP
route&lt;/a&gt;. This is not a nice way to solve it but I didn't
want to continue with this solution as I switched to &lt;code&gt;wg-quick&lt;/code&gt; which doesn't
need all of this. This is probably the same problem as described in Arch Wiki,
so, if you know how to fix it send me a message, I will update the article.&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nixos.wiki/wiki/WireGuard"&gt;NixOS Wiki Wireguard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://search.nixos.org/packages?show=mullvad-vpn&amp;amp;type=packages&amp;amp;query=mullvad"&gt;Mullvad-vpn application in Nix repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.procustodibus.com/blog/2021/03/wireguard-allowedips-calculator/"&gt;Wireguard AllowIPs Calculator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/WireGuard#Connection_lost_after_sleep_using_systemd-networkd"&gt;Arch Wiki - Connection lost after sleep&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Article"></category><category term="pelican"></category><category term="publishing"></category></entry><entry><title>Nix cheatsheet</title><link href="https://alberand.com/nix-notes.html" rel="alternate"></link><published>2023-09-13T00:00:00+02:00</published><updated>2023-10-16T00:00:00+02:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2023-09-13:/nix-notes.html</id><summary type="html">&lt;p&gt;This is collection of common problems I face working with Nix packages&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is collection of common problems/issues I faced working with Nix packages
or on NixOS. I find it quite difficult to find necessary information in Nix
reference as it missing or hidden too deep in the text.&lt;/p&gt;
&lt;h2 id="i-just-want-to-build-a-derivation"&gt;I just want to build a derivation&lt;/h2&gt;
&lt;p&gt;From time to time I google for an expression to put into &lt;code&gt;default.nix&lt;/code&gt; to build
a derivation defined in &lt;code&gt;derivation.nix&lt;/code&gt;. Here is oneliner:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6211bac-6cb3-11f0-81ee-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6211bac-6cb3-11f0-81ee-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nix-build&lt;span class="w"&gt; &lt;/span&gt;-E&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;with import &amp;lt;nixpkgs&amp;gt; { }; callPackage ./derivation.nix { }&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;You can also put this expression into default.nix and run with just &lt;code&gt;nix-build&lt;/code&gt;.
The &lt;code&gt;-K&lt;/code&gt; will create nix-build-derivation-ver directory in &lt;code&gt;/tmp&lt;/code&gt; so you can
debug it.&lt;/p&gt;
&lt;h2 id="shellnix-example"&gt;shell.nix example&lt;/h2&gt;
&lt;p&gt;I'm always looking for &lt;code&gt;shell.nix&lt;/code&gt; example which I create almost in every
project:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b62127f7-6cb3-11f0-8d85-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b62127f7-6cb3-11f0-8d85-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; pkgs &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; &lt;span class="l"&gt;&amp;lt;nixpkgs&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt;
pkgs&lt;span class="o"&gt;.&lt;/span&gt;mkShell &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# runtime deps&lt;/span&gt;
  &lt;span class="ss"&gt;buildInputs =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    hello
  &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id="why-src-fails-but-src-fetchfromgithub-not"&gt;Why src = ./.; fails but src = fetchFromGithub {...} not?&lt;/h2&gt;
&lt;p&gt;This is because your local copy is probably dirty; nix does &lt;code&gt;cp&lt;/code&gt; which copies
all stuff to /nix/store. In some cases running &lt;code&gt;make clean&lt;/code&gt; will save you. But I
would suggest using git to fetch your local branch:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6213656-6cb3-11f0-bfa8-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6213656-6cb3-11f0-bfa8-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ss"&gt;src =&lt;/span&gt; fetchgit &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;url =&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/.&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;hash =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Note that you will need to commit all your changes.&lt;/p&gt;
&lt;h2 id="error-cycle-detected-in-build-of-nixstorexxxdrv-in-the-references-of-output-bin-from-output-out"&gt;error: cycle detected in build of '/nix/store/xxx.drv' in the references of output 'bin' from output 'out'&lt;/h2&gt;
&lt;p&gt;Don't know what this error is about but I solved it by removing "bin" from the
&lt;code&gt;outputs&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b62146a4-6cb3-11f0-a570-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b62146a4-6cb3-11f0-a570-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; pkgs &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;import&lt;/span&gt; &lt;span class="l"&gt;&amp;lt;nixpkgs&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="p"&gt;;&lt;/span&gt; stdenv&lt;span class="o"&gt;.&lt;/span&gt;mkDerivation &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="c1"&gt;#          &amp;quot;bin&amp;quot; was here&lt;/span&gt;
  &lt;span class="c1"&gt;#          v&lt;/span&gt;
  &lt;span class="ss"&gt;outputs =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dev&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;out&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;doc&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id="flake-input-is-not-the-latest-commit"&gt;Flake input is not the latest commit&lt;/h2&gt;
&lt;p&gt;From time to time results of the &lt;code&gt;nix build .#&lt;/code&gt; didn't have the latest inputs.
This probably happens because use specified your input as a git branch and did
some changes to the branch. But forgot to tell nix that the branch was changed
(with &lt;code&gt;nix flake update&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b62158b3-6cb3-11f0-9182-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b62158b3-6cb3-11f0-9182-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="ss"&gt;inputs =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    nixpkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;url =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:nixos/nixpkgs/nixos-unstable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;#                                        vvvvvvvvvvvvvvvvvv&lt;/span&gt;
    xfsprogs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;url =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github:alberand/xfsprogs?branch=fsverity-v2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    xfsprogs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;flake =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The solution to this is always use &lt;code&gt;rev=&amp;lt;commit hash&amp;gt;&lt;/code&gt; to pinpoint flake's
inputs.&lt;/p&gt;
&lt;h2 id="force-rebuild-download-sources"&gt;Force rebuild (download sources)&lt;/h2&gt;
&lt;p&gt;When running something like &lt;code&gt;nix run github:alberand/nix-kernel-vm&lt;/code&gt; nix will
download the source code. Unfortunately, if repository is updated right after
that, nix will not re-download new version if command is run again. I haven't
found a way to force nix do it except asking garbage collector to clean the
whole &lt;code&gt;/nix/store&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6216cb8-6cb3-11f0-aa1c-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6216cb8-6cb3-11f0-aa1c-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nix-store&lt;span class="w"&gt; &lt;/span&gt;-gc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Note that this command remove only unused packages (ones which are not installed
into the system).&lt;/p&gt;
&lt;h2 id="disable-remote-buildersdistributed-build"&gt;Disable remote builders/distributed build&lt;/h2&gt;
&lt;p&gt;I have two machines, one is more powerful which is used as Binary cache and
remote builder. However, when debugging broken build there's need to build nix
derivation locally. To disable distributed build without changing system
configuration one can use:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6217733-6cb3-11f0-95c4-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6217733-6cb3-11f0-95c4-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nix-build&lt;span class="w"&gt; &lt;/span&gt;--builders&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/nix/store/ls9jdiy2ihizrglvba080565rrk1ri3b-xfstests-git.drv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id="list-of-derivation-phases"&gt;List of derivation phases&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;$&lt;/code&gt; marks empty by default phases. Depending on the package other phases
could also be empty.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$prePhases&lt;/li&gt;
&lt;li&gt;unpackPhase&lt;/li&gt;
&lt;li&gt;patchPhase&lt;/li&gt;
&lt;li&gt;$preConfigurePhases&lt;/li&gt;
&lt;li&gt;configurePhase&lt;/li&gt;
&lt;li&gt;$preBuildPhases&lt;/li&gt;
&lt;li&gt;buildPhase&lt;/li&gt;
&lt;li&gt;checkPhase&lt;/li&gt;
&lt;li&gt;$preInstallPhases&lt;/li&gt;
&lt;li&gt;installPhase&lt;/li&gt;
&lt;li&gt;fixupPhase&lt;/li&gt;
&lt;li&gt;installCheckPhase&lt;/li&gt;
&lt;li&gt;$preDistPhases&lt;/li&gt;
&lt;li&gt;distPhase&lt;/li&gt;
&lt;li&gt;$postPhases&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="get-a-hash-of-a-source"&gt;Get a hash of a source&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;nurl&lt;/code&gt; can also use fetcher set with an argument or overwrite any fetcher
arguments (pretty handy to set &lt;code&gt;allRefs&lt;/code&gt; when commit is not on master)&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b622084a-6cb3-11f0-aa2c-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b622084a-6cb3-11f0-aa2c-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nix-shell -p nurl --run \
    &amp;quot;nurl https://github.com/alberand/linux 007f6ea233d9d18e7d44dbf643bf900967a55ef9 2&amp;gt;/dev/null&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;with &lt;code&gt;allRefs&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6227485-6cb3-11f0-8df0-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6227485-6cb3-11f0-8df0-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nix-shell -p nurl --run \
    &amp;quot;nurl --fetcher builtins.fetchGit --arg allRefs true https://github.com/alberand/linux v6.15 2&amp;gt;/dev/null&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content><category term="Article"></category><category term="nix"></category><category term="faq"></category><category term="common problems"></category><category term="nixos"></category><category term="nixpkgs"></category></entry><entry><title>Linux Kernel VM in NixOS</title><link href="https://alberand.com/nixos-linux-kernel-vm.html" rel="alternate"></link><published>2023-04-26T00:00:00+02:00</published><updated>2023-04-26T00:00:00+02:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2023-04-26:/nixos-linux-kernel-vm.html</id><summary type="html">&lt;p&gt;Development setup for Linux kernel on NixOS&lt;/p&gt;</summary><content type="html">&lt;p&gt;NixOS is quite flexible when it comes to creating VM. I haven't seen such an
easy tool to create images. Basically, you define your system with nix
configuration and then build it with a command. Nix already provides thousands
of packages, all of which you can use in your VM.&lt;/p&gt;
&lt;p&gt;There are a few disadvantages though. For example, as Nix is always tries to
build a clean system you will recompiling packages on any change. This is super
inconvenient even for a minimal configuration. But there's definitely a way
around it.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-simplest-vm"&gt;The simplest VM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-package-to-vm"&gt;Adding package to VM&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#customizing-packages"&gt;Customizing packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#custom-kernel-and-config"&gt;Custom Kernel and .config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#network-and-ssh"&gt;Network and SSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usb-and-disks-in-vm"&gt;USB and Disks in VM&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#disks-and-partitions"&gt;Disks and partitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usb-devices"&gt;USB devices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-a-bootable-iso"&gt;Create a bootable ISO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips-tricks-to-configure-the-vm"&gt;Tips &amp;amp; tricks to configure the VM&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#run-script-after-boot"&gt;Run script after boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#environment-variables"&gt;Environment variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#my-setup"&gt;My setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#full-configuration"&gt;Full configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="the-simplest-vm"&gt;The simplest VM&lt;/h2&gt;
&lt;p&gt;Create a directory and a simple &lt;code&gt;vm.nix&lt;/code&gt; with following content:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b5f95a1b-6cb3-11f0-b72a-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b5f95a1b-6cb3-11f0-b72a-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; pkgs&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;imports =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="l"&gt;&amp;lt;nixpkgs/nixos/modules/profiles/qemu-guest.nix&amp;gt;&lt;/span&gt;
    &lt;span class="l"&gt;&amp;lt;nixpkgs/nixos/modules/virtualisation/qemu-vm.nix&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;# Root with empty password&lt;/span&gt;
  users&lt;span class="o"&gt;.&lt;/span&gt;extraUsers&lt;span class="o"&gt;.&lt;/span&gt;root&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;password =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  users&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;mutableUsers =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  system&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;stateVersion =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;22.11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;In the file above we imported a pair of Nix configuration files. The
&lt;code&gt;qemu-guest.nix&lt;/code&gt; is quite simple - it just adds most of the &lt;code&gt;virtio&lt;/code&gt; kernel
modules, so the system can work under QEMU. The &lt;code&gt;qemu-guest.nix&lt;/code&gt; defines a Nix
module. This module defines how NixOS configuration from &lt;code&gt;vm.nix&lt;/code&gt; is build into
virtual machine. The module defines many parameters to tweak the final VM, most
of them is defined under &lt;code&gt;virtualization.&lt;/code&gt; (see examples below). You can find
both of these files in the nixpkgs repo (&lt;a href="https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/profiles/qemu-guest.nix"&gt;qemu-guest.nix&lt;/a&gt; and
&lt;a href="https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/virtualisation/qemu-vm.nix"&gt;qemu-vm.nix&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Next, we set &lt;code&gt;root&lt;/code&gt; password to be empty. The &lt;code&gt;mutableUsers&lt;/code&gt; parameter tells Nix
to have only those users which are defined in Nix configuration. In other words,
your system will have only those users which are defined in &lt;code&gt;vm.nix&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The last parameter is used for internal Nix states. Just leave it like this.&lt;/p&gt;
&lt;p&gt;I also suggest to &lt;code&gt;git init .&lt;/code&gt; to not lose any progress. This is actually enough
to get a working VM. Compile it with following command:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b5f9b5a6-6cb3-11f0-9b6c-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b5f9b5a6-6cb3-11f0-9b6c-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;                              what&lt;/span&gt;
&lt;span class="go"&gt;                               to&lt;/span&gt;
&lt;span class="go"&gt;           path to package    build     argument for build&lt;/span&gt;
&lt;span class="go"&gt;           vvvvvvvvvvvvvvv     vv       vvvvvvvvvvvvvvvvvvvvvv&lt;/span&gt;

&lt;span class="go"&gt;nix-build &amp;#39;&amp;lt;nixpkgs/nixos&amp;gt;&amp;#39; -A vm --arg configuration ./vm.nix&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The command above will take quite some time, especially compiling the kernel.
Eventually &lt;code&gt;nix-build&lt;/code&gt; will create a &lt;code&gt;./result&lt;/code&gt; directory. The directory contains
shell script to run VM:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b5fa1032-6cb3-11f0-82de-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b5fa1032-6cb3-11f0-82de-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;./result/bin/run-nixos-vm&lt;/span&gt;
&lt;span class="go"&gt;qemu goes brrrrr....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;To exit from the VM type &lt;code&gt;poweroff&lt;/code&gt; command or &lt;code&gt;CTRL + A&lt;/code&gt; followed by &lt;code&gt;X&lt;/code&gt;
to kill Qemu. I recommend to use &lt;code&gt;poweroff&lt;/code&gt; as disk image can get corrupted and
your guest system won't boot. Fix it by removing the &lt;code&gt;nixos.qcow2&lt;/code&gt; image in the
current directory and running VM again.&lt;/p&gt;
&lt;h1 id="adding-package-to-vm"&gt;Adding package to VM&lt;/h1&gt;
&lt;p&gt;This is as easy as:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b5fa1cb7-6cb3-11f0-9cdd-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b5fa1cb7-6cb3-11f0-9cdd-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;environment&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;systemPackages =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  htop
  util-linux
  vim
  tmux
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Much much easier than using Buildroot or any other tool. The system will have
all necessary packages and will not be bloated as full-blown linux distribution.&lt;/p&gt;
&lt;h2 id="customizing-packages"&gt;Customizing packages&lt;/h2&gt;
&lt;p&gt;Adding overlay on top of the packages, to build with your local changes and the
process becomes amazingly easy to get a VM with custom environment. In the
following example I have a local copy of &lt;code&gt;xfstests&lt;/code&gt; sources which I modified.
With overlay I tell Nix to use my local source instead one defined in the
nixpkgs repository.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b5fa2b56-6cb3-11f0-a41b-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b5fa2b56-6cb3-11f0-a41b-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt;
  &lt;span class="c1"&gt;# Let&amp;#39;s use local source for this package&lt;/span&gt;
  &lt;span class="ss"&gt;xfstests-overlay =&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;final&lt;span class="p"&gt;:&lt;/span&gt; prev&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;xfstests =&lt;/span&gt; prev&lt;span class="o"&gt;.&lt;/span&gt;xfstests&lt;span class="o"&gt;.&lt;/span&gt;overrideAttrs &lt;span class="p"&gt;(&lt;/span&gt;prev&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;version =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;git&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;src =&lt;/span&gt; &lt;span class="l"&gt;/home/alberand/Projects/xfstests-dev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

nixpkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;overlays =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  xfstests-overlay-remote
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;In Nix derivation is a package and overlay can be used to change build inputs of
that package. With overlay you can change sources, version, metadata, build
flags, append commands to build scripts etc.&lt;/p&gt;
&lt;p&gt;In the following example the sources of the &lt;code&gt;xfstests&lt;/code&gt; derivation points to
local repository. The &lt;code&gt;xfstests&lt;/code&gt; derivation is already defined in NixOS packages
store. We don't need to define how to build sources or install them. Check out
&lt;a href="https://github.com/NixOS/nixpkgs/blob/e506555f21b3a624e3c7af6c26d1467464107f7e/pkgs/tools/misc/xfstests/default.nix"&gt;all the parameters&lt;/a&gt; set by this derivation.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b5fa3fcb-6cb3-11f0-91fd-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b5fa3fcb-6cb3-11f0-91fd-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Custom local xfstests&lt;/span&gt;
&lt;span class="ss"&gt;xfstests-overlay =&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;final&lt;span class="p"&gt;:&lt;/span&gt; prev&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;xfstests =&lt;/span&gt; prev&lt;span class="o"&gt;.&lt;/span&gt;xfstests&lt;span class="o"&gt;.&lt;/span&gt;overrideAttrs &lt;span class="p"&gt;(&lt;/span&gt;prev&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;version =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;git&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;src =&lt;/span&gt; fetchGit &lt;span class="l"&gt;/home/alberand/xfstests-dev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;prev&lt;/code&gt; keyword is like input for our overlay. In this case &lt;code&gt;prev&lt;/code&gt; points
to &lt;code&gt;pkgs&lt;/code&gt;. The &lt;code&gt;final&lt;/code&gt; keyword is like output for our overlay - the state of the
&lt;code&gt;pkgs&lt;/code&gt; after modifications. In this example output is not used directly.&lt;/p&gt;
&lt;p&gt;This overlay takes &lt;code&gt;xfstests&lt;/code&gt; derivation from the inputs and replaces &lt;code&gt;version&lt;/code&gt;
and &lt;code&gt;src&lt;/code&gt; parameters of the derivation. When derivation is build new parameters
will be used. The version can be exact &lt;code&gt;major.minor&lt;/code&gt; or just &lt;code&gt;git&lt;/code&gt; for not tagged
git tree. The &lt;code&gt;nix-build&lt;/code&gt; will tell you exact version if you don't know what to
specify. There's many &lt;a href="https://nixos.org/manual/nixpkgs/stable/#chap-pkgs-fetchers"&gt;available fetchers&lt;/a&gt; to get sources.&lt;/p&gt;
&lt;p&gt;If you use local sources somewhere in the flake you would probably need to
specify &lt;code&gt;--impure&lt;/code&gt; keyword. This will tell nix to not to be that strict with
version of the sources.&lt;/p&gt;
&lt;h1 id="custom-kernel-and-config"&gt;Custom Kernel and .config&lt;/h1&gt;
&lt;p&gt;Linux Kernel is provided as derivation and has many helpful derivations already
in store. To build kernel from your local source tree with local &lt;code&gt;.config&lt;/code&gt;
define following package in the &lt;code&gt;let&lt;/code&gt; section:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b5fa526d-6cb3-11f0-8739-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b5fa526d-6cb3-11f0-8739-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ss"&gt;kernel-custom =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;linuxKernel&lt;span class="o"&gt;.&lt;/span&gt;customPackage &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# Note that nix uses this version to install relevant tools (e.g. flex).&lt;/span&gt;
  &lt;span class="c1"&gt;# You can specify &amp;#39;git&amp;#39; not to change it every time you change the verions&lt;/span&gt;
  &lt;span class="c1"&gt;# but I haven&amp;#39;t got it working properly. Nix will tell you which version&lt;/span&gt;
  &lt;span class="c1"&gt;# you should specify if you don&amp;#39;t know.&lt;/span&gt;
  &lt;span class="ss"&gt;version =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;6.2.0-rc2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;configfile =&lt;/span&gt; &lt;span class="l"&gt;/home/alberand/kernel/.config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;src =&lt;/span&gt; fetchGit &lt;span class="l"&gt;/home/alberand/kernel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;and then set this package as default kernel in the config section:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b5fa6519-6cb3-11f0-b0f8-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b5fa6519-6cb3-11f0-b0f8-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;boot&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;kernelPackages =&lt;/span&gt; kernel-custom&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;However, one problem with this setup is that any change to the &lt;code&gt;.config&lt;/code&gt; or
kernel tree triggers Nix to rebuild the kernel. The rebuild happens because Nix
tries to make a clean build.&lt;/p&gt;
&lt;p&gt;VM script which is created by &lt;code&gt;nix-build&lt;/code&gt; command can use other pre-compiled
kernel, not built by &lt;code&gt;nix-build&lt;/code&gt;. To achieve this do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Remove package which was defined above and &lt;code&gt;boot.kernelPackage&lt;/code&gt; setting. Fix
   the version of the kernel on the version of your tree. For example, if you
   are building somewhere v6.2 kernel you should do:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b60c6dcf-6cb3-11f0-9b1f-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b60c6dcf-6cb3-11f0-9b1f-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;kernelPackages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pkgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;linuxKernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;packagesFor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pkgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;linuxKernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kernels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;linux_6_2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The version should correspond to your kernel as nix will build all modules
for the version defined in nix configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compile Linux kernel as you usually do to get &lt;code&gt;bzImage&lt;/code&gt;. Don't forget to
   enable all necessary features for QEMU build. See &lt;a href="https://github.com/NixOS/nixpkgs/blob/23968f4c5dba6a59ec7b54fe2dcaebaccefb8bfe/nixos/modules/virtualisation/qemu-vm.nix#L1158-L1176"&gt;features&lt;/a&gt; which Nix
   expects to be enable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define hostname for VM and build it with &lt;code&gt;nix-build&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b60cd809-6cb3-11f0-907f-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b60cd809-6cb3-11f0-907f-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;networking.hostName = &amp;quot;vm&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Export environment variable with path to your kernel and run the VM:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b60e0c8b-6cb3-11f0-85b4-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b60e0c8b-6cb3-11f0-85b4-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NIXPKGS_QEMU_KERNEL_vm&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x86&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bzImage&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The name is &lt;code&gt;NIXPKGS_QEMU_KERNEL_&amp;lt;networking.hostName&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I've tried to use CCache with Nix to make its kernel build faster, but that
doesn't seem to work yet. Note that it highly depend on your needs, the modules
can be loaded afterwords when VM already booted. I was looking for a way to
quickly modify the kernel and fire up the VM with testsuite.&lt;/p&gt;
&lt;h1 id="network-and-ssh"&gt;Network and SSH&lt;/h1&gt;
&lt;p&gt;Create interface on the host side, assuming you are on NixOS (this is not for
&lt;code&gt;vm.nix&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b5fa71fc-6cb3-11f0-aeb1-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b5fa71fc-6cb3-11f0-aeb1-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# This goes into your host configuration.nix&lt;/span&gt;
networking&lt;span class="o"&gt;.&lt;/span&gt;interfaces&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;tap0 =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tap0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;virtual =&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;virtualType =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;virtualOwner =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;alberand&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

networking&lt;span class="o"&gt;.&lt;/span&gt;interfaces&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;tap0 =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;ipv4 =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;addresses =&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
      &lt;span class="ss"&gt;address =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;192.168.10.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;prefixLength =&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}];&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Then set IP static address for VM and enable SSH server (in &lt;code&gt;vm.nix&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b5fa8923-6cb3-11f0-99b8-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b5fa8923-6cb3-11f0-99b8-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# This goes into your vm.nix&lt;/span&gt;
networking&lt;span class="o"&gt;.&lt;/span&gt;interfaces&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;eth1 =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  ipv4&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;addresses =&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="ss"&gt;address =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;192.168.10.2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;prefixLength =&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
services&lt;span class="o"&gt;.&lt;/span&gt;openssh&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;enable =&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;If you are not on NixOS, try following my guide on &lt;a href="https://alberand.com/host-only-networking-set-up-for-qemu-hypervisor.html"&gt;setting up host network with
QEMU&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="usb-and-disks-in-vm"&gt;USB and Disks in VM&lt;/h1&gt;
&lt;h2 id="disks-and-partitions"&gt;Disks and partitions&lt;/h2&gt;
&lt;p&gt;To share partition with VM add an option to Qemu:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b5fa9b6a-6cb3-11f0-a82a-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b5fa9b6a-6cb3-11f0-a82a-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;virtualisation&lt;span class="o"&gt;.&lt;/span&gt;qemu&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;options =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;-hdc /dev/sda4&amp;quot;&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;-hdd /dev/sda5&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Or if you need just a dummy space you can add pre-allocated disk image or ask
Nix to create an empty partitions:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b5faab66-6cb3-11f0-b239-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b5faab66-6cb3-11f0-b239-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Nix will create 2 virtual disks&lt;/span&gt;
virtualisation&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;emptyDiskImages =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;8192&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;# Create 2 virtual disk with 8G and 4G&lt;/span&gt;

&lt;span class="c1"&gt;# Append images as partitions to VM&lt;/span&gt;
virtualisation&lt;span class="o"&gt;.&lt;/span&gt;qemu&lt;span class="o"&gt;.&lt;/span&gt;options&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;drives =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;vdc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="ss"&gt;file =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/test.img&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;vdb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="ss"&gt;file =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="l"&gt;/scratch.img&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id="usb-devices"&gt;USB devices&lt;/h2&gt;
&lt;p&gt;To pass a USB device to VM there's three things need to be done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find out device Bus, Port, Vendor ID, and Product ID&lt;/li&gt;
&lt;li&gt;Configure permission to the USB device&lt;/li&gt;
&lt;li&gt;Add configuration to QEMU&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Device BUS and PORT&lt;/strong&gt;. we need to find out metadata of the device to identify
it. This can be done with &lt;code&gt;lsusb&lt;/code&gt; utility. Before connecting your device run
&lt;code&gt;lsusb&lt;/code&gt;, then connect the device and run it again. Compare to list to find out
what's new. The name of the device could also give a hint (like manufacturer
name or that it is keyboard). Save device Bus, Port, Vendor ID, and Product ID:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b60985f9-6cb3-11f0-9c7e-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b60985f9-6cb3-11f0-9c7e-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;       bus        port    vend prod
       vvv        vvv     vvvv vvvv

   Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
   Bus 003 Device 124: ID 0424:2514 Microchip Technology, Inc. (formerly SMSC) USB 2.0 Hub
   Bus 003 Device 123: ID 413c:2113 Dell Computer Corp. KB216 Wired Keyboard
   Bus 003 Device 122: ID 03f0:0941 HP, Inc X500 Optical Mouse
   Bus 003 Device 121: ID 1a40:0101 Terminus Technology Inc. Hub
   Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
&amp;gt;&amp;gt; Bus 002 Device 003: ID 8564:1000 Transcend Information, Inc. JetFlash
   Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
   Bus 001 Device 006: ID 1b3f:2002 Generalplus Technology Inc. 808 Camera
   Bus 001 Device 002: ID 8087:0032 Intel Corp. AX210 Bluetooth
   Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Note that Bus and Device number could change depending on which USB port you
use!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Permissions&lt;/strong&gt;. To configure permissions since only root has access to USB
devices by default. To achieve this we can use &lt;code&gt;udev&lt;/code&gt;. This utility is
responsible for preparing device for use when hardware is connected - for
example loading kernel driver. We need to create a rule to tell &lt;code&gt;udev&lt;/code&gt; make our
device accessible for our user. I recommend using &lt;code&gt;vendorid&lt;/code&gt; and &lt;code&gt;productid&lt;/code&gt;
attributes to always uniquely identify the device:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b60a0082-6cb3-11f0-ad0f-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b60a0082-6cb3-11f0-ad0f-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# 32G flash drive
#
# From lsusb:
# Bus 002 Device 003: ID 8564:1000 Transcend Information, Inc. JetFlash
#
#                                   vvvvvvvvvvvvvvvvvvvvvvvvvv change vvvvvvvvvvvvvvvvvvvvvvvvvv
#                                   vvvv                     vvvv                       vvvvvvvv
SUBSYSTEMS==&amp;quot;usb&amp;quot;, ATTR{idVendor}==&amp;quot;8564&amp;quot;, ATTR{idProduct}==&amp;quot;1000&amp;quot;, MODE=&amp;quot;0660&amp;quot;, OWNER=&amp;quot;alberand&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Add this rule to &lt;code&gt;/etc/udev/rules.d/99-vm.rules&lt;/code&gt; or on NixOS to
&lt;code&gt;services.udev.extraRules&lt;/code&gt;. Lastly, let's reload the rules so new rule is
applied:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b60a0c41-6cb3-11f0-ba88-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b60a0c41-6cb3-11f0-ba88-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;udevadm&lt;span class="w"&gt; &lt;/span&gt;control&lt;span class="w"&gt; &lt;/span&gt;--reload-rules&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;udevadm&lt;span class="w"&gt; &lt;/span&gt;trigger
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Check that owner changed (path could differ!):&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;-la&lt;span class="w"&gt; &lt;/span&gt;/dev/bus/usb/002
total&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
drwxr-xr-x&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;root&lt;span class="w"&gt;     &lt;/span&gt;root&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Apr&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;:36&lt;span class="w"&gt; &lt;/span&gt;.
drwxr-xr-x&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;root&lt;span class="w"&gt;     &lt;/span&gt;root&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="m"&gt;120&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Mar&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;:55&lt;span class="w"&gt; &lt;/span&gt;..
crw-rw-r--&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;root&lt;span class="w"&gt;     &lt;/span&gt;root&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;189&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Apr&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;:38&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;001&lt;/span&gt;
crw-rw----&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;alberand&lt;span class="w"&gt; &lt;/span&gt;root&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;189&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;130&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Apr&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;:39&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;003&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;For more details on &lt;code&gt;udev&lt;/code&gt; see &lt;a href="https://wiki.archlinux.org/title/udev"&gt;arch wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;QEMU Configuration&lt;/strong&gt;. Add one of the following line with changed parameters to
&lt;code&gt;virtualisation.qemu.options&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b60a3057-6cb3-11f0-a2ad-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b60a3057-6cb3-11f0-a2ad-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s2"&gt;&amp;quot;-usb -device usb-host,hostbus=2,hostport=4&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# or&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;-usb -device usb-host,vendorid=0x8564,productid=0x1000&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Boot your VM and check that device is there with &lt;code&gt;lsusb&lt;/code&gt;, it should have same
vendor and product IDs.&lt;/p&gt;
&lt;h1 id="create-a-bootable-iso"&gt;Create a bootable ISO&lt;/h1&gt;
&lt;p&gt;Time to deploy VM to cloud or other machine. This is as easy as:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b60a440b-6cb3-11f0-8440-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b60a440b-6cb3-11f0-8440-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;nix-shell&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;nixos-generators&lt;span class="w"&gt; &lt;/span&gt;--run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nixos-generate --format iso \&lt;/span&gt;
&lt;span class="s2"&gt;    --configuration ./vm.nix -o result&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Test it with:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b60a51e7-6cb3-11f0-9198-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b60a51e7-6cb3-11f0-9198-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;nix-shell&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;qemu
$&lt;span class="w"&gt; &lt;/span&gt;qemu-system-x86_64&lt;span class="w"&gt; &lt;/span&gt;-enable-kvm&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;256&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-cdrom&lt;span class="w"&gt; &lt;/span&gt;result/iso/nixos-*.iso
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Flash it to disk:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b60a61c6-6cb3-11f0-a53e-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b60a61c6-6cb3-11f0-a53e-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;                              &lt;/span&gt;your&lt;span class="w"&gt; &lt;/span&gt;disk
&lt;span class="w"&gt;                                 &lt;/span&gt;vvv
$&lt;span class="w"&gt; &lt;/span&gt;dd&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;result/iso/*.iso&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sdX&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;progress
$&lt;span class="w"&gt; &lt;/span&gt;sync
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;nixos-generators&lt;/code&gt; packages have many output formats. You can create AWS
images, docker containers, iso, google compute cloud images etc. Note, however,
that not every configuration would work for every output format. For example, if
you define that the image is VM guest (with imports and virtualisation. params)
it won't probably boot on bare metal without manual fixes.&lt;/p&gt;
&lt;h1 id="tips-tricks-to-configure-the-vm"&gt;Tips &amp;amp; tricks to configure the VM&lt;/h1&gt;
&lt;h2 id="run-script-after-boot"&gt;Run script after boot&lt;/h2&gt;
&lt;p&gt;Example of systemd service started on boot. You can run some tests with it and
then call shutdown in &lt;code&gt;postStop&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b60a7493-6cb3-11f0-9f36-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b60a7493-6cb3-11f0-9f36-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;systemd&lt;span class="o"&gt;.&lt;/span&gt;services&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;enable =&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;serviceConfig =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;Type =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;oneshot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;StandardOutput =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;StandardError =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;User =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;Group =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;WorkingDirectory =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/root&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="ss"&gt;after =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;network.target&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;network-online.target&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;local-fs.target&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="ss"&gt;wants =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;network.target&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;network-online.target&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;local-fs.target&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="ss"&gt;wantedBy =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;multi-user.target&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="ss"&gt;postStop =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;    echo &amp;quot;Bye bye&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;  &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;script =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;    echo &amp;quot;Hello I do work&amp;quot;&lt;/span&gt;

&lt;span class="s1"&gt;    # Beep beep... Human... back to work&lt;/span&gt;
&lt;span class="s1"&gt;    echo -ne &amp;#39;\007&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;  &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id="environment-variables"&gt;Environment variables&lt;/h2&gt;
&lt;p&gt;To define environment variable use following expression:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b60a993d-6cb3-11f0-b108-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b60a993d-6cb3-11f0-b108-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;environment&lt;span class="o"&gt;.&lt;/span&gt;variables&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;NAME =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;thisisname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id="my-setup"&gt;My setup&lt;/h1&gt;
&lt;p&gt;I was trying to create a VM which I start with one command, the VM takes kernel
from the current working directory and runs &lt;code&gt;xfstests&lt;/code&gt; against it.&lt;/p&gt;
&lt;p&gt;Then, I decided to write a script to add more features. Now in my working
directory I have &lt;code&gt;vmtest&lt;/code&gt; command. This commands takes configuration from
&lt;code&gt;.vmtest&lt;/code&gt; in the current dir.&lt;/p&gt;
&lt;p&gt;The configuration contains path to kernel I want to run, list of modules to
load, suite of &lt;code&gt;xfstests&lt;/code&gt; to run, and QEMU options such as disk partitions. This
will probably grow further as I will need to also will need to change versions
of xfstests and other packages. You can find my &lt;a href="https://github.com/alberand/nix-kernel-vm"&gt;project here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="full-configuration"&gt;Full configuration&lt;/h1&gt;
&lt;p&gt;To compile:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b60aa752-6cb3-11f0-b830-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b60aa752-6cb3-11f0-b830-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;nix-build &amp;#39;&amp;lt;nixpkgs/nixos&amp;gt;&amp;#39; -A vm --arg configuration ./vm.nix&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;To run:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b60ab37b-6cb3-11f0-b5bd-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b60ab37b-6cb3-11f0-b5bd-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;./result/bin/run-nixos-vm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Configuration:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b60ac320-6cb3-11f0-886b-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b60ac320-6cb3-11f0-886b-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; config&lt;span class="p"&gt;,&lt;/span&gt; modulesPath&lt;span class="p"&gt;,&lt;/span&gt; pkgs&lt;span class="p"&gt;,&lt;/span&gt; lib&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt;

&lt;span class="c1"&gt;# Custom local xfstests&lt;/span&gt;
&lt;span class="ss"&gt;xfstests-overlay =&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;final&lt;span class="p"&gt;:&lt;/span&gt; prev&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;xfstests =&lt;/span&gt; prev&lt;span class="o"&gt;.&lt;/span&gt;xfstests&lt;span class="o"&gt;.&lt;/span&gt;overrideAttrs &lt;span class="p"&gt;(&lt;/span&gt;prev&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;version =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;git&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;src =&lt;/span&gt; fetchGit &lt;span class="l"&gt;/home/alberand/xfstests-dev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;# Custom remote xfstests&lt;/span&gt;
&lt;span class="ss"&gt;xfstests-overlay-remote =&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;final&lt;span class="p"&gt;:&lt;/span&gt; prev&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;xfstests =&lt;/span&gt; prev&lt;span class="o"&gt;.&lt;/span&gt;xfstests&lt;span class="o"&gt;.&lt;/span&gt;overrideAttrs &lt;span class="p"&gt;(&lt;/span&gt;prev&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;version =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;git&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;src =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;fetchFromGitHub &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;owner =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;alberand&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;repo =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xfstests&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;rev =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;6e6fb1c6cc619afb790678f9530ff5c06bb8f24c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="ss"&gt;sha256 =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;OjkO7wTqToY1/U8GX92szSe7mAIL+61NoZoBiU/pjPE=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="ss"&gt;kernel-custom =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;linuxKernel&lt;span class="o"&gt;.&lt;/span&gt;customPackage &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# Note that nix uses this version to install relevant tools (e.g. flex).&lt;/span&gt;
  &lt;span class="c1"&gt;# You can specify &amp;#39;git&amp;#39; not to change it every time you change the verions&lt;/span&gt;
  &lt;span class="c1"&gt;# but I haven&amp;#39;t got it working properly. Nix will tell you which version&lt;/span&gt;
  &lt;span class="c1"&gt;# you should specify if you don&amp;#39;t know.&lt;/span&gt;
  &lt;span class="ss"&gt;version =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;6.2.0-rc2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;configfile =&lt;/span&gt; &lt;span class="l"&gt;/home/alberand/kernel/.config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="ss"&gt;src =&lt;/span&gt; fetchGit &lt;span class="l"&gt;/home/alberand/kernel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;in&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;imports =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;modulesPath &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/profiles/qemu-guest.nix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;modulesPath &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/virtualisation/qemu-vm.nix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="ss"&gt;boot =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;kernelParams =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;console=ttyS0,115200n8&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;console=ttyS0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="ss"&gt;consoleLogLevel =&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;mkDefault &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;# This is happens before systemd&lt;/span&gt;
    &lt;span class="ss"&gt;postBootCommands =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;echo &amp;#39;Not much to do before systemd :)&amp;#39; &amp;gt; /dev/kmsg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    crashDump&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;enable =&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Set my custom kernel&lt;/span&gt;
    &lt;span class="c1"&gt;# kernelPackages = kernel-custom;&lt;/span&gt;
    &lt;span class="c1"&gt;# or pin the version&lt;/span&gt;
    &lt;span class="ss"&gt;kernelPackages =&lt;/span&gt; pkgs&lt;span class="o"&gt;.&lt;/span&gt;linuxKernel&lt;span class="o"&gt;.&lt;/span&gt;packagesFor pkgs&lt;span class="o"&gt;.&lt;/span&gt;linuxKernel&lt;span class="o"&gt;.&lt;/span&gt;kernels&lt;span class="o"&gt;.&lt;/span&gt;linux_6_0&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;# Auto-login with empty password&lt;/span&gt;
  users&lt;span class="o"&gt;.&lt;/span&gt;extraUsers&lt;span class="o"&gt;.&lt;/span&gt;root&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;initialHashedPassword =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  services&lt;span class="o"&gt;.&lt;/span&gt;getty&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;autologinUser =&lt;/span&gt; lib&lt;span class="o"&gt;.&lt;/span&gt;mkDefault &lt;span class="s2"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  networking&lt;span class="o"&gt;.&lt;/span&gt;firewall&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;enable =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  networking&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;hostName =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;vm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  networking&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;useDHCP =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  services&lt;span class="o"&gt;.&lt;/span&gt;getty&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;helpLine =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;    Log in as &amp;quot;root&amp;quot; with an empty password.&lt;/span&gt;
&lt;span class="s1"&gt;    If you are connect via serial console:&lt;/span&gt;
&lt;span class="s1"&gt;    Type CTRL-A X to exit QEMU&lt;/span&gt;
&lt;span class="s1"&gt;  &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Not needed in VM&lt;/span&gt;
  documentation&lt;span class="o"&gt;.&lt;/span&gt;doc&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;enable =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  documentation&lt;span class="o"&gt;.&lt;/span&gt;man&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;enable =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  documentation&lt;span class="o"&gt;.&lt;/span&gt;nixos&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;enable =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  documentation&lt;span class="o"&gt;.&lt;/span&gt;info&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;enable =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  programs&lt;span class="o"&gt;.&lt;/span&gt;bash&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;enableCompletion =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  programs&lt;span class="o"&gt;.&lt;/span&gt;command-not-found&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;enable =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Do something after systemd started&lt;/span&gt;
  systemd&lt;span class="o"&gt;.&lt;/span&gt;services&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;foo =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    serviceConfig&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;Type =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;oneshot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;wantedBy =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;multi-user.target&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="ss"&gt;script =&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;      echo &amp;#39;This service runs right near login&amp;#39; &amp;gt; /dev/kmsg&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;# Setup envirionment&lt;/span&gt;
  environment&lt;span class="o"&gt;.&lt;/span&gt;variables&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;TERM =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xterm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="ss"&gt;virtualisation =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;diskSize =&lt;/span&gt; &lt;span class="mi"&gt;20000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# MB&lt;/span&gt;
    &lt;span class="ss"&gt;memorySize =&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# MB&lt;/span&gt;
    &lt;span class="ss"&gt;cores =&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;writableStoreUseTmpfs =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;useDefaultFilesystems =&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;# Run qemu in the terminal not in Qemu GUI (to exit CTRL + A -&amp;gt; X)&lt;/span&gt;
    &lt;span class="ss"&gt;graphics =&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;# Create 2 virtual disk with 8G and 4G (run &amp;#39;lsblk&amp;#39; in VM)&lt;/span&gt;
    &lt;span class="ss"&gt;emptyDiskImages =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;8192&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="ss"&gt;qemu =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;options =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="c1"&gt;# I want to try a kernel which I compiled somewhere&lt;/span&gt;
        &lt;span class="c1"&gt;#&amp;quot;-kernel /home/user/my-linux/arch/x86/boot/bzImage&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;#&amp;quot;-kernel /home/alberand/my-linux/arch/x86/boot/bzImage&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# OR&lt;/span&gt;
        &lt;span class="c1"&gt;# You can set env. variable not to change configuration everytime:&lt;/span&gt;
        &lt;span class="c1"&gt;#   export NIXPKGS_QEMU_KERNEL_vm=/path/to/arch/x86/boot/bzImage&lt;/span&gt;
        &lt;span class="c1"&gt;# The name is NIXPKGS_QEMU_KERNEL_&amp;lt;networking.hostName&amp;gt;&lt;/span&gt;

        &lt;span class="c1"&gt;# Append real partitions to VM&lt;/span&gt;
        &lt;span class="c1"&gt;# &amp;quot;-hdc /dev/sda4&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# &amp;quot;-hdd /dev/sda5&amp;quot;&lt;/span&gt;

        &lt;span class="c1"&gt;# better handling of console interface&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;-serial mon:stdio&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;];&lt;/span&gt;

      &lt;span class="c1"&gt;# Append images as partition to VM&lt;/span&gt;
      &lt;span class="c1"&gt;# Don&amp;#39;t forget to create images. For example, with:&lt;/span&gt;
      &lt;span class="c1"&gt;#   xfs_io -f -c &amp;quot;falloc 0 10g&amp;quot; test.img&lt;/span&gt;
      &lt;span class="c1"&gt;# OR much slower version:&lt;/span&gt;
      &lt;span class="c1"&gt;#   dd if=/dev/null of=test.img bs=4k count=2450&lt;/span&gt;
      &lt;span class="ss"&gt;drives =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="c1"&gt;#{ name = &amp;quot;vdc&amp;quot;; file = &amp;quot;${toString ./test.img}&amp;quot;; }&lt;/span&gt;
        &lt;span class="c1"&gt;#{ name = &amp;quot;vdb&amp;quot;; file = &amp;quot;${toString ./scratch.img}&amp;quot;; }&lt;/span&gt;
      &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="ss"&gt;sharedDirectories =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;# fstests = {&lt;/span&gt;
      &lt;span class="c1"&gt;#  source = &amp;quot;/home/alberand/Projects/xfstests-dev&amp;quot;;&lt;/span&gt;
      &lt;span class="c1"&gt;#  target = &amp;quot;/root/xfstests&amp;quot;;&lt;/span&gt;
      &lt;span class="c1"&gt;# };&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;# Add packages to VM&lt;/span&gt;
  environment&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;systemPackages =&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; pkgs&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    htop
      util-linux
      xfstests
      vim
      tmux
      fsverity-utils
      trace-cmd
      perf-tools
      linuxPackages_latest&lt;span class="o"&gt;.&lt;/span&gt;perf
      openssl
  &lt;span class="p"&gt;];&lt;/span&gt;


  &lt;span class="c1"&gt;# Apply overlay on the package (use different src as we replaced &amp;#39;src = &amp;#39;)&lt;/span&gt;
  nixpkgs&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;overlays =&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    xfstests-overlay-remote
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;# xfstests related&lt;/span&gt;
  users&lt;span class="o"&gt;.&lt;/span&gt;users&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;paul =&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;isNormalUser  =&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="ss"&gt;description  =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Test user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;# This value determines the NixOS release from which the default&lt;/span&gt;
  &lt;span class="c1"&gt;# settings for stateful data, like file locations and database versions&lt;/span&gt;
  &lt;span class="c1"&gt;# on your system were taken. It‘s perfectly fine and recommended to leave&lt;/span&gt;
  &lt;span class="c1"&gt;# this value at the release version of the first install of this system.&lt;/span&gt;
  &lt;span class="c1"&gt;# Before changing this value read the documentation for this option&lt;/span&gt;
  &lt;span class="c1"&gt;# (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).&lt;/span&gt;
  system&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;stateVersion =&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;22.11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# Did you read the comment?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/"&gt;Download vm.nix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alberand.com/host-only-networking-set-up-for-qemu-hypervisor.html"&gt;QEMU network on Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alberand/nix-kernel-vm"&gt;My setup - nix-kernel-vm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/udev"&gt;UDEV rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nixos.org/manual/nixpkgs/stable/#chap-pkgs-fetchers"&gt;NixOS fetchers (download sources from anywhere&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Article"></category><category term="kernel"></category><category term="vm"></category><category term="qemu"></category><category term="nixos"></category></entry><entry><title>Add custom tags to markdown - python-markdown</title><link href="https://alberand.com/markdown-custom-tags.html" rel="alternate"></link><published>2023-03-28T00:00:00+02:00</published><updated>2023-03-28T00:00:00+02:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2023-03-28:/markdown-custom-tags.html</id><summary type="html">&lt;p&gt;Wouldn't it be cool to add custom tags to markdown documents?&lt;/p&gt;</summary><content type="html">&lt;p&gt;Wouldn't it be cool to add custom tags to markdown documents? I came across
this idea while reading &lt;a href="https://xeiaso.net/blog"&gt;this blog&lt;/a&gt;. Check out this &lt;a href="https://raw.githubusercontent.com/Xe/site/main/blog/voice-control-talon.markdown"&gt;example&lt;/a&gt;. The source
markdown includes several tags such as &lt;code&gt;&amp;lt;xeblog-conv&lt;/code&gt; for "conversation" which
adds comments to the article, and &lt;code&gt;&amp;lt;xeblog-hero&lt;/code&gt; for adding AI-generated Anime
art, which is really cool! Although I haven't investigated how it's done, I'm
excited to try implementing something similar myself.&lt;/p&gt;
&lt;p&gt;As this blog is generated with &lt;a href="https://getpelican.com/"&gt;Pelican&lt;/a&gt;, I thought that maybe it's also
capable of parsing custom Markdown tags. Under the hood, Pelican uses
&lt;a href="https://github.com/Python-Markdown/markdown"&gt;python-markdown&lt;/a&gt;. The docs says we can write &lt;a href="https://python-markdown.github.io/extensions/api/#writing-extensions-for-python-markdown"&gt;custom extensions&lt;/a&gt; for Markdown.
Let's try and see how to do. I will show integration with Pelican but this can
be applied for anything using python-markdown.&lt;/p&gt;
&lt;p&gt;Since this blog is generated with &lt;a href="https://getpelican.com/"&gt;Pelican&lt;/a&gt;, I wondered if it could parse
custom Markdown tags. After researching, I discovered that Pelican uses
&lt;a href="https://github.com/Python-Markdown/markdown"&gt;python-markdown&lt;/a&gt; under the hood. According to the documentation, we can
write &lt;a href="https://python-markdown.github.io/extensions/api/#writing-extensions-for-python-markdown"&gt;custom extensions&lt;/a&gt; for Markdown parser. I'll demonstrate integration
with Pelican, but this approach can be applied to anything that uses
python-markdown.&lt;/p&gt;
&lt;div style="text-align: center; width: 100%"&gt;
&lt;a href="#full-code"&gt;
Jump to the full code
&lt;/a&gt;
&lt;/div&gt;

&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#block-processor"&gt;Block processor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#clickable-images"&gt;Clickable images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#full-code"&gt;Full Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="block-processor"&gt;Block processor&lt;/h3&gt;
&lt;p&gt;Suppose we want to parse Markdown blocks that begin with the &lt;code&gt;[nickname]:&lt;/code&gt;
prefix. The block is paragraph of text separated by newlines. Python-markdown
offers 5 different processors, each suited for different purposes. For instance,
if we wanted to censor certain words, we might use &lt;a href="https://python-markdown.github.io/extensions/api/#preprocessors"&gt;Preprocessors&lt;/a&gt;.&lt;/p&gt;
&lt;div class="comment"&gt;
&lt;p&gt;/* This is comment I'm talking about. Check out the &lt;a href="https://raw.githubusercontent.com/alberand/Blog/master/content/markdown-custom-tags.md"&gt;source code&lt;/a&gt; */&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Start with adding some imports in the pelicanconf.py:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b63cabb7-6cb3-11f0-8d0d-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b63cabb7-6cb3-11f0-8d0d-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;markdown.extensions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Extension&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;markdown.blockprocessors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BlockProcessor&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xml.etree.ElementTree&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;etree&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Then we need a processor which will look onto markdown blocks and decide if the
block need to be changed or not. The processor determines if a block requires
modification by calling the &lt;code&gt;self.test()&lt;/code&gt; function. This function should return
&lt;code&gt;True&lt;/code&gt; if block need to be changed by this processor. In this instance, I check
for a regular expression at the beginning of the block.&lt;/p&gt;
&lt;p&gt;The second method &lt;code&gt;self.run()&lt;/code&gt; is executed only if &lt;code&gt;self.test()&lt;/code&gt; returns
true. This method receives the parent element of the HTML tree (such as a
&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; object) and a list of blocks. The list of blocks starts with the block
which matched in the &lt;code&gt;self.test()&lt;/code&gt;. Therefore, &lt;code&gt;blocks[0]&lt;/code&gt; will have multi-line
string of the block of interest. The rest of the list contains all the
subsequent blocks from the document.&lt;/p&gt;
&lt;p&gt;We receive a list of block as our parser can look for a closing tag which is
placed in another block. As an example: code block can have newlines in it.&lt;/p&gt;
&lt;p&gt;The processed block need to be &lt;code&gt;pop()&lt;/code&gt;ed from the list with &lt;code&gt;blocks.pop(0)&lt;/code&gt;.
Otherwise, if we failed to process the block, for example due to missing closing
tag, we can return &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b63cbf51-6cb3-11f0-a1d8-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b63cbf51-6cb3-11f0-a1d8-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Comments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BlockProcessor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;RE_FENCE_START&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^\[([a-zA-Z0-9_-]{3,})\]: &amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# [alberand]:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RE_FENCE_START&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RE_FENCE_START&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;comment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseChunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;blocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The next stop is to create an Extension. This will be actually quite empty.
Simply copy this one or, &lt;a href="https://python-markdown.github.io/extensions/api/"&gt;check the documentation&lt;/a&gt; if you use something different
than &lt;code&gt;BlockProcessor&lt;/code&gt;. In this call the &lt;code&gt;register()&lt;/code&gt; requires processor instances,
name of this new processor, and priority (can stay 175).&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b63cfa6b-6cb3-11f0-a20d-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b63cfa6b-6cb3-11f0-a20d-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AlberandTagsExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extendMarkdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blockprocessors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;comments&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;175&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The final step is to create our extension instance and let python-markdown lib
know about its existence. With a little bit more magic, you can also add
configuration parameters to your extension. These parameters should then be
added &lt;code&gt;extension_configs&lt;/code&gt; section in &lt;code&gt;MARKDOWN&lt;/code&gt; dictionary:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b63d154f-6cb3-11f0-b2e9-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b63d154f-6cb3-11f0-b2e9-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;extensions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AlberandTagsExtension&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;extension_configs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;markdown.extensions.extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;markdown.extensions.meta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;output_format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3 id="clickable-images"&gt;Clickable images&lt;/h3&gt;
&lt;p&gt;The other wish I had was to make every image in my Blog clickable (opens
in a new tab). However, the default Pelican doesn't offer this feature. Luckily,
it's easy to achieve with processors.&lt;/p&gt;
&lt;p&gt;In the following implementation we first parse markdown block to get
parameters such as text and link. Then, we create a &lt;code&gt;&amp;lt;div class="image-container"&amp;gt;&lt;/code&gt;,
inside this div we add a link &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; with an image &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; inside. This way, image
is wrapped in the link that opens in a new tab when clicked. The &lt;code&gt;class&lt;/code&gt; also
allows to apply CSS style on all images uniformly, such as centering them.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b63de729-6cb3-11f0-b417-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b63de729-6cb3-11f0-b417-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;markdown.inlinepatterns&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LinkInlineProcessor&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ImageInlineProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LinkInlineProcessor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Return a img element from the given match. &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handleMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;handled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

        &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;handled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

        &lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;image-container&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;img&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;alt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The difference from the comment processor above is that python-markdown already
has default Image processor. We need to deregister the default one and replace
it with our own implementation.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b63e4473-6cb3-11f0-ab4c-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b63e4473-6cb3-11f0-ab4c-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# The regex is copied from python-markdown source code&lt;/span&gt;
&lt;span class="n"&gt;IMAGE_LINK_RE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\!\[&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AlberandTagsExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extendMarkdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Deregister default image processor and replace it with our custom one&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinePatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deregister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;image_link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinePatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;ImageInlineProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IMAGE_LINK_RE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;image_link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3 id="full-code"&gt;Full Code&lt;/h3&gt;
&lt;p&gt;Put this into &lt;code&gt;pelicanconf.py&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b63e66c5-6cb3-11f0-adf3-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b63e66c5-6cb3-11f0-adf3-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;markdown.extensions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Extension&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;markdown.blockprocessors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BlockProcessor&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xml.etree.ElementTree&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;etree&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ImageInlineProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LinkInlineProcessor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Return a img element from the given match. &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handleMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;handled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

        &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;handled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

        &lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;image-container&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;img&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;alt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Comments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BlockProcessor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;RE_FENCE_START&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^\[([a-zA-Z0-9_-]{3,})\]: &amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# [alberand]:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RE_FENCE_START&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RE_FENCE_START&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;comment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseChunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;blocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;IMAGE_LINK_RE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\!\[&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AlberandTagsExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extendMarkdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blockprocessors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;comments&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;175&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Deregister default image processor and replace it with our custom one&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinePatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deregister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;image_link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inlinePatterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;ImageInlineProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IMAGE_LINK_RE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;image_link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;extensions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AlberandTagsExtension&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;extension_configs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;markdown.extensions.extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;markdown.extensions.meta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;output_format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content><category term="Article"></category><category term="python"></category><category term="pelican"></category><category term="python-markdown"></category><category term="markdown"></category><category term="tags"></category></entry><entry><title>Programming Arduino over Bluetooth</title><link href="https://alberand.com/ota-for-arduino.html" rel="alternate"></link><published>2020-07-26T00:00:00+02:00</published><updated>2020-07-26T00:00:00+02:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2020-07-26:/ota-for-arduino.html</id><summary type="html">&lt;p&gt;Over the air (wireless) programming of the Arduino with HC-05 Bluetooth module&lt;/p&gt;</summary><content type="html">&lt;p&gt;
&lt;figure class="article-figure"&gt;&lt;img alt="Over the air updates based on HC-05 and Arduino Nano" height="432" src="images/ota-setup_768x432.png" style="aspect-ratio: 768/432;" width="768"&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Wireless firmware updates are attractive. No wires, no broken cheap microUSB
cables, no annoying grabbing in the box full cables to find the right one 😁.
For one of my project I decided to implement over the air updates of firmware
(or shortly OTA). The choice of wireless stack fell on Bluetooth. Actually, I
was thinking how I can utilize my HC-05 modules. These are really cheap and
could do a decent job for a simple wireless applications.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-bootloader-works"&gt;How bootloader works?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#over-the-air-updates-preparation"&gt;Over-the-air updates preparation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#needed-hardware"&gt;Needed hardware&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#bootloader"&gt;Bootloader&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#setting-up-optiboot"&gt;Setting up Optiboot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-bootloader-with-arduino-nano"&gt;Installing bootloader with Arduino Nano&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing-bootloader"&gt;Testing Bootloader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#bluetooth-module"&gt;Bluetooth Module&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-to-change-hc-05-configuration"&gt;How to change HC-05 configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing-bluetooth-communication"&gt;Testing Bluetooth communication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#uploading-firmware-over-bluetooth"&gt;Uploading firmware over Bluetooth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#future-improvements"&gt;Future Improvements&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="how-bootloader-works"&gt;How bootloader works?&lt;/h2&gt;
&lt;p&gt;Let's start from some theory. Initially I didn't want to tamper with a
bootloader but it seems like there is no other simpler way. So, firstly let's
investigate how exactly it works and how to change it to upload data through the
Bluetooth.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Internal memory&lt;/strong&gt;. All microcontrollers used in Arduino have internal flash
memory. This memory is used to store the code of an application and bootloader.
The important feature of ATMega MCU is that flash is "In-System
self-programmable". That means that MCU can updates its own memory without use
of external devices. As I said there is actually two application sitting in the
memory an application and bootloader.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The bootloader&lt;/strong&gt;. It is simple application which is always stored in the
flash memory of microcontroller but could be rewritten as everything else. When
you power on your Arduino it doesn't immediately goes to your application, it
actually starts at specific address, so called &lt;strong&gt;Reset vector&lt;/strong&gt;. This
address has "jump" instruction which tells microcontroller to jump to the
address where bootloader is located. You can actually get rid of bootloader and
jump straight to the application code but this approach has some major
disadvantages.&lt;/p&gt;
&lt;p class="note-right"&gt;
    &lt;span class="note-sign"&gt;Note: &lt;/span&gt; For example, one of the disadvantages
    is - that if your application will start updating itself and hang during the
    process or connection to the host will be lost - you will end up with
    non-working software which won't be able to update itself anymore.
&lt;/p&gt;

&lt;p&gt;The further action depends on the bootloader. In most cases it starts with
setup of essential peripherals such as communication interface. Next, it starts
waiting for the data on this interface. This is the moment when PC starts sending
bytes to the Arduino. Actually there is the whole communication protocol - you
can find more details in the official specification &lt;a href="http://ww1.microchip.com/downloads/en/Appnotes/doc2591.pdf"&gt;STK500&lt;/a&gt;. The bootloader
receives data from the PC and writes it to the memory. After communication is
complete bootloader jumps to the address where application is stored. From now
on, MCU is in control of the application.&lt;/p&gt;
&lt;p&gt;
&lt;figure class="article-figure"&gt;&lt;img alt="Bootloader process" src="images/bootloader-principle.png"&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Does it have to be serial/USB?&lt;/strong&gt;. No, it does not! It could be anything -
memory chip, USB, wifi or even LoRa (wouldn't use this one for firmware updates
😁). Basically, you can get your newest fancy firmware from anywhere. On most of
the Arduinos there is USB to UART controller which give us possibility to talk
to the microcontroller via USB port. But, we can connect our microcontroller to
any communication interface. So, how we can exploit it? The HC-05 is Bluetooth
module which supports "Serial Port Profile". That means that those modules
emulates a serial port over Bluetooth 😀. FYI: There are many more different 
&lt;a href="https://en.wikipedia.org/wiki/List_of_Bluetooth_profiles"&gt;Bluetooth profiles&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The plan&lt;/strong&gt;. There are some articles on implementation of the "Over the
Air" updates based on combination of Arduino and HC-05. In this post I describe
realization which needs only one soldered wire to the HC-05. However,
before uploading new firmware you need to press a reset button to reset the
board. It can be seen as a completely wrong as it's much more convenient to have
everything automatic. But, it is super easy to setup and I see it as a security
features (not a restriction👌), as to upload firmware to the device you need
physical access to it, so nobody else can do it.&lt;/p&gt;
&lt;h2 id="over-the-air-updates-preparation"&gt;Over-the-air updates preparation&lt;/h2&gt;
&lt;p&gt;The setup is following - Arduino is connected to the Bluetooth module. Instead
of connecting USB cable you pair your PC with HC-05 module. OS will create a
serial port which you already know how to use. As I previously mentioned, there
is need to manually reset the board. After pressing a reset button bootloader
will start waiting for data on UART. With Arduino IDE (or actually &lt;code&gt;avrdude&lt;/code&gt;)
you write data to the Bluetooth port. The data or more precisely firmware is
read by Bootloader and stored to the memory.&lt;/p&gt;
&lt;p&gt;To make it work we need to do two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adjust bootloader timeout to the delays in Bluetooth communication&lt;/li&gt;
&lt;li&gt;Configure HC-05 to communicate with Arduino by setting up correct baudrate &lt;/li&gt;
&lt;li&gt;Bonus: set some fancy name for the Bluetooth module&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="needed-hardware"&gt;Needed hardware&lt;/h3&gt;
&lt;p&gt;
&lt;figure class="article-figure"&gt;&lt;img alt="Hardware used for Over the Air updates" src="images/hardware-set-photo.png"&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arduino Nano&lt;/li&gt;
&lt;li&gt;Arduino Nano&lt;/li&gt;
&lt;li&gt;HC-05 Bluetooth module&lt;/li&gt;
&lt;li&gt;Wires&lt;/li&gt;
&lt;li&gt;Breadoard&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bootloader"&gt;Bootloader&lt;/h2&gt;
&lt;h3 id="setting-up-optiboot"&gt;Setting up Optiboot&lt;/h3&gt;
&lt;p&gt;I decided to try one of the popular bootloaders with lot of useful features -
&lt;a href="https://github.com/Optiboot/optiboot"&gt;optiboot&lt;/a&gt;. As I later discovered, timeouts have already been implemented.
So, one task is done 🤔. I set timeout to the longest one available - 8 seconds.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Compile&lt;/strong&gt;. After reading a little bit a Makefile I successfully compiled it
for ATMega328p with 8 seconds timeout and 57600 baudrate. Check out &lt;a href="https://github.com/Optiboot/optiboot/wiki/CompilingOptiboot"&gt;official
documentation&lt;/a&gt; for more information on how to compile Optiboot for other
boards.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61358db-6cb3-11f0-b4dd-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61358db-6cb3-11f0-b4dd-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;git@github.com:Optiboot/optiboot.git
&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;optiboot
&lt;span class="gp"&gt;$ &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;-C&lt;span class="w"&gt; &lt;/span&gt;optiboot/bootloaders/optiboot&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;WDTIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;BAUD_RATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;57600&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;atmega328
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why change timeout?&lt;/strong&gt; The long timeout is required as Bluetooth protocol
needs time to setup the connection. When you want to upload new firmware
computer opens serial port attached to the Bluetooth channel. Bluetooth, in
turn, tries to connect to the device. This process takes time and is much longer
than UART/USB. I suppose that 4 or even 2 seconds timeouts would do the job but
I didn't test it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bootloader baudrate&lt;/strong&gt;. The default baudrate of the bootloader is &lt;code&gt;115200&lt;/code&gt;.
I've decide to change it to &lt;code&gt;57600&lt;/code&gt; as it is default one for &lt;code&gt;avrdude&lt;/code&gt; in
Arduino IDE and platformio. But that means that I need to change baudrate on the
HC-05 module, as default one is &lt;code&gt;38400&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="installing-bootloader-with-arduino-nano"&gt;Installing bootloader with Arduino Nano&lt;/h3&gt;
&lt;p&gt;The uploading process was a little bit tricky because all of my wires,
breadboards and Arduinos are from cheap Chinese manufactures 😐. The quality
is close to very bad. The main problem was loosely connection wires as they had
glue on the metallic tip. So, if communication is unstable try to move around
with those wires - it could be a reason why. Also, don't use the longest one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Arduino as ISP programmer&lt;/strong&gt;. The first step is to take another Arduino and
upload ArduionISP sketch from the standard set of examples &lt;code&gt;Examples -&amp;gt;
11. ArduinoISP -&amp;gt; ArduinoISP&lt;/code&gt;. This application turns your Arduino into a
programmer (like you heh). &lt;/p&gt;
&lt;p&gt;
&lt;figure class="article-figure"&gt;&lt;img alt="Installing bootloader with Arduino Nano" src="images/nano-update-bootloader.png"&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;You can also add some LEDs to a programmer to see the state of uploading
process. I highly recommend doing so as it helps a lot with debugging. The LEDs
are connected as follows:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b613850c-6cb3-11f0-a4b5-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b613850c-6cb3-11f0-a4b5-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// Put an LED (with resistor) on the following pins:
// 9: Heartbeat - shows the programmer is running
// 8: Error - Lights up if something goes wrong (use red if that makes sense)
// 7: Programming - In communication with the slave
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;As I use it quite often I soldered it and now I can use it as standalone device:&lt;/p&gt;
&lt;p&gt;
&lt;figure class="article-figure"&gt;&lt;img alt="Custom board for uploading bootloading into Arduino" src="images/arduino-bootloader-loader.png"&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How does it work?&lt;/strong&gt; The principle is following - the ArduinoISP is connected
to the PC. Over the SPI this Arduino connects to the ICSP (those six pin put
aside) of the Arduino we want to program. On the PC you run &lt;code&gt;avrdude&lt;/code&gt; on port
attached to the programmer. The programmer transfers commands and data to the
connected board.&lt;/p&gt;
&lt;h3 id="testing-bootloader"&gt;Testing Bootloader&lt;/h3&gt;
&lt;p&gt;Before starting with Bluetooth let's test that bootloader works at all.
Connect programmed Arduino to the PC and try uploading some firmware as usual
(e.g. blink blink blink...💡). It should work as before with built-in
bootloader.&lt;/p&gt;
&lt;h2 id="bluetooth-module"&gt;Bluetooth Module&lt;/h2&gt;
&lt;h3 id="how-to-change-hc-05-configuration"&gt;How to change HC-05 configuration&lt;/h3&gt;
&lt;p&gt;The module has two modes - one for normal operation and one for changing
configuration with AT commands. Firstly, you need a serial adapter to send
commands to the module from the PC. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Serial interface to the module&lt;/strong&gt;. If you have a USB to serial adapter
(something like &lt;a href="https://www.aliexpress.com/item/32826575637.html?spm=a2g0o.productlist.0.0.1a1b152byezyN0&amp;amp;algo_pvid=1415518c-b43a-43ee-bc72-99da975e1540&amp;amp;algo_expid=1415518c-b43a-43ee-bc72-99da975e1540-0&amp;amp;btsid=0be3764315876534842897724efca8&amp;amp;ws_ab_test=searchweb0_0,searchweb201602_,searchweb201603_"&gt;this&lt;/a&gt;) I would suggest using it. But you can replace it with
another Arduino with serial passthrough application.&lt;/p&gt;
&lt;p class="note-left"&gt;
    &lt;span class="note-sign"&gt;Note: &lt;/span&gt; By serial passthrough application I
    mean the app which reads data on one serial port and send it to another one
    and vise versa.
&lt;/p&gt;

&lt;p&gt;
&lt;figure class="article-figure"&gt;&lt;img alt="Image of setup to change configuration in HC-05" src="images/hc-05-configuration.png"&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The Arduino is connected to the PC with a cable. I used Arduino Nano which has
only one serial port. Therefore, my only port is occupied by a PC. But we need a
second one for the HC-05. The solution is amazing &lt;SoftwareSerial.h&gt; library
which allows simulate serial communication on some pins. Upload following sketch
into your board:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b614d29e-6cb3-11f0-90f1-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b614d29e-6cb3-11f0-90f1-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;SoftwareSerial.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define BAUDRATE 38400&lt;/span&gt;

&lt;span class="n"&gt;SoftwareSerial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;hcmodule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// RX, TX&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BAUDRATE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Serial passthrough&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;hcmodule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BAUDRATE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hcmodule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hcmodule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;hcmodule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Possibly, you will need to play a little bit with baud rate. My module had
default one &lt;code&gt;38400&lt;/code&gt; but I think I saw modules with &lt;code&gt;57600&lt;/code&gt;. So, try both✌️..&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Boot into AT mode&lt;/strong&gt;. Connect HC-05 module as shown in the figure above. Then,
turn off and turn on the module by disconnecting power wire (only module, D3 pin
should stay High). If pin 34 is high, HC-05 will boot in the AT mode.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Changing configuration&lt;/strong&gt;. Open serial monitor on your PC. The following
sequence of commands checks version of the HC-05 module, switches module to the
slave mode and sets baudrate to &lt;code&gt;57600&lt;/code&gt; with 1 stop bin and no parity. There is
actually much &lt;a href="https://www.itead.cc/wiki/Serial_Port_Bluetooth_Module_(Master/Slave)_:_HC-05"&gt;more commands&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6150f20-6cb3-11f0-8f33-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6150f20-6cb3-11f0-8f33-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;AT&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt; OK&lt;/span&gt;
&lt;span class="go"&gt;AT+VERSION?&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt; +VERSION:2.0-20100601&lt;/span&gt;
&lt;span class="go"&gt;AT+ROLE=0&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt; OK&lt;/span&gt;
&lt;span class="go"&gt;AT+UART:57600,1,0&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt; OK&lt;/span&gt;
&lt;span class="go"&gt;AT+UART?&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt; +UART:57600,1,0&lt;/span&gt;
&lt;span class="go"&gt;&amp;gt; OK&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;You can also change name with &lt;code&gt;AT+NAME=name&lt;/code&gt;. I created a &lt;a href="https://github.com/alberand/hctools"&gt;small application&lt;/a&gt;
which could be easier to use if you want to configure multiple devices.&lt;/p&gt;
&lt;h3 id="testing-bluetooth-communication"&gt;Testing Bluetooth communication&lt;/h3&gt;
&lt;p&gt;On Windows, after connecting with a Bluetooth manager, HC-05 should be visible
as &lt;code&gt;COMx&lt;/code&gt; port. You can find exact port name in the "Device Manager". Anyway,
the port should be visible directly in in the Arduino IDE. On Linux there is a
little bit more steps to do to connect the module. I wrote &lt;a href="https://alberand.com/hc-05-linux.html"&gt;the whole
article&lt;/a&gt; on that topic 🤨. However, if you have a decent Bluetooth chip and
drivers it should be simple.&lt;/p&gt;
&lt;p class="note-left"&gt;
    &lt;span class="note-sign"&gt;Note: &lt;/span&gt; On Linux after connecting HC-05 with a
    Bluetooth manager it should be enough to bind it with a `rfcomm`. 
&lt;/p&gt;

&lt;p&gt;Let's test that communication works at all before even trying to update
firmware. Upload the same "serial pass-through" firmware but with correct
baudrate. By the correct one I mean that which you set in the HC-05 module with
&lt;code&gt;AT+UART&lt;/code&gt; command (&lt;code&gt;57600&lt;/code&gt; if you did the same).&lt;/p&gt;
&lt;p&gt;Then, run the serial monitor on the port with Arduino (e.g. &lt;code&gt;COM1&lt;/code&gt; or 🐧
&lt;code&gt;/dev/ttyUSB0&lt;/code&gt;). And another one on virtual port attached to Bluetooth channel
(e.g. &lt;code&gt;COM2&lt;/code&gt; or 🐧 &lt;code&gt;/dev/rfcomm0&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id="uploading-firmware-over-bluetooth"&gt;Uploading firmware over Bluetooth&lt;/h2&gt;
&lt;p&gt;Time to try it. Prepare some simple application such as "Blink" and do the
following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Compile application&lt;/li&gt;
&lt;li&gt;Press reset button on the Arduino&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;avrdude&lt;/code&gt; on serial port attached to the Bluetooth channel (or Upload
   button in Arduino IDE)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It works well in both Arduino IDE and platformio. However, &lt;code&gt;avrdude&lt;/code&gt; can't
sometimes synchronize with the bootloader and start printing errors. Simply reset
the board again and it will catch up.&lt;/p&gt;
&lt;h2 id="future-improvements"&gt;Future Improvements&lt;/h2&gt;
&lt;p&gt;Updating firmware by overwriting the old one is a bad idea. If communication
isn't reliable, or device unexpectedly turns off, the firmware could corrupt and
becomes unusable. The better way is to use external memory chip (or internal
memory if your program is small enough) - write firmware on the external memory
first, then copy it to the primary location and run it.&lt;/p&gt;
&lt;p&gt;One of the bootloader which allows this is &lt;a href="https://github.com/LowPowerLab/DualOptiboot"&gt;DualOptiboot&lt;/a&gt;. I am planning to
try this one in the next version of my Bluetooth controller. The first step will
be to choose a memory chip and add it to the board.&lt;/p&gt;
&lt;p&gt;The setup is quite simple and definitely not suitable for any device for sale.
Nevertheless, there is &lt;a href="https://interrupt.memfault.com/blog/device-firmware-update-cookbook"&gt;amazing article&lt;/a&gt; on the Interrupt blog which lists
much more details on how to build reliable firmware update mechanism.&lt;/p&gt;
&lt;h3 id="references"&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.aliexpress.com/wholesale?catId=0&amp;amp;SearchText=hc-05"&gt;HC-05&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.itead.cc/wiki/Serial_Port_Bluetooth_Module_(Master/Slave)_:_HC-05"&gt;List of AT commands for HC-05&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Optiboot/optiboot"&gt;Optiboot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/LowPowerLab/DualOptiboot"&gt;DualOptiboot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ww1.microchip.com/downloads/en/Appnotes/doc2591.pdf"&gt;STK500 protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_Bluetooth_profiles"&gt;List of Bluetooth profiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf"&gt;ATmega328P datasheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.avrfreaks.net/sites/default/files/bootloader_faq.pdf"&gt;Good FAQ about Bootloaders by Brad Schick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://interrupt.memfault.com/blog/device-firmware-update-cookbook"&gt;Interrupt - Device firmware update cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;style&gt;
#content img {
    background: white;
    max-width: 820px;
}
&lt;/style&gt;</content><category term="Article"></category><category term="arduino"></category><category term="bluetooth"></category></entry><entry><title>How to connect HC-05 to Linux PC</title><link href="https://alberand.com/hc-05-linux.html" rel="alternate"></link><published>2020-03-23T00:00:00+01:00</published><updated>2020-03-23T00:00:00+01:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2020-03-23:/hc-05-linux.html</id><summary type="html">&lt;p&gt;Connect Bluetooth HC-05 module to Linux PC using Arduino Nano for configuration&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bluetooth on Linux has always been a headache for me. As I expected connecting
HC-05 module to my laptop wasn't any better. In this note I want to describe
how to configure and connect &lt;a href="https://www.aliexpress.com/wholesale?catId=0&amp;amp;SearchText=HC-05+Bluetooth"&gt;HC-05 Bluetooth module&lt;/a&gt; to the Linux PC.&lt;/p&gt;
&lt;p&gt;Playing with these cheap (about &lt;code&gt;3$&lt;/code&gt;) Bluetooth modules I wrote a small
application which can help to diagnose and configure them. In this article I use
Arduino Nano (atmega328p) and classical HC-05 with a linear power regulator.
There is no need to solder anything complicated - only one little wire 😀.&lt;/p&gt;
&lt;p&gt;
&lt;figure class="article-figure"&gt;&lt;img alt="HC-05 Bluetooth module" src="images/hc-05.jpg"&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p class="picture-legend"&gt;
        Image is taken from
        &lt;a alt="Arduino e-shop" href="https://www.laskarduino.cz/bluetooth-modul-hc-05-ttl/"&gt;www.laskarduino.cz&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Firstly, let me describe this Arduino app. I can't say that it is reliable
but it is simpler than doing everything by hand.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#hctools-hc-05-configuration-tool"&gt;HCTOOLS - HC-05 Configuration tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#back-to-pc"&gt;Back to PC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pairing-pc-with-the-hc-05-device"&gt;Pairing PC with the HC-05 device&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#time-to-open-serial-monitor"&gt;Time to open serial monitor&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#troubleshooting-hc-05"&gt;Troubleshooting HC-05&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="hctools-hc-05-configuration-tool"&gt;&lt;a href="https://github.com/alberand/hctools"&gt;&lt;code&gt;HCTOOLS&lt;/code&gt;&lt;/a&gt; - HC-05 Configuration tool&lt;/h1&gt;
&lt;p&gt;This application can be used on most of the Arduinos starting from Arduino Nano.
You can download it from the &lt;a href="https://github.com/alberand/hctools"&gt;Github&lt;/a&gt;. I used &lt;a href="https://platformio.org/"&gt;platformio&lt;/a&gt; as a development
environment so if you are familiar with it you know what to do (look into
&lt;code&gt;platformio.ini&lt;/code&gt;). If not, you can use classical Arduino IDE. To do so, you need
to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Copy content of &lt;code&gt;src/main.cpp&lt;/code&gt; into Arduino IDE&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;SoftwareSerial&lt;/code&gt; and &lt;code&gt;SimpleCLI&lt;/code&gt; libraries with library manager&lt;/li&gt;
&lt;li&gt;Upload the sketch.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The application provides "shell"-like interface to work with HC-05 module. It
has following commands/features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;echo&lt;/strong&gt; - run echo server. It is useful to check if your module is working.
  You run this command, connect to the module with your phone or PC and start
  sending some text to it. The module will receive the text, send it to Arduino,
  Arduino will send it back to the module and then module will send it back to
  you. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;atmode&lt;/strong&gt; - switch HC-05 into AT command mode. The Arduino will just into
  serial passtrhogh device between your PC and HC-05. This allow you to
  communicate with Bluetooth module without any additional hardware (with the
  exception of Arduino of course). You can test if it works by sending &lt;code&gt;AT&lt;/code&gt;
  command which should be answered with &lt;code&gt;OK&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;master &amp;lt;MAC-of-slave&amp;gt; &amp;lt;name&amp;gt; &amp;lt;baudrate&amp;gt;&lt;/strong&gt; - configure connected HC-05 module as
  Bluetooth master. It has two parameters. The first one is MAC address of the
  bluetooth device to which you want your module to connect immediately after
  boot. Note that MAC address should be in the following form &lt;code&gt;1234:12:123456&lt;/code&gt; -
  not like classical one with lot of &lt;code&gt;:&lt;/code&gt;. The second parameter is just Bluetooth
  name of your HC-05 module. Pretty useful to distinguish it from other HC-05
  slaves. The last argument is &lt;code&gt;baudrate&lt;/code&gt; of the UART.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;slave &amp;lt;name&amp;gt; &amp;lt;baudrate&amp;gt;&lt;/strong&gt; - configure connected HC-05 module as Bluetooth slave. The
  same as for master you can configured name of the module. The last argument is &lt;code&gt;baudrate&lt;/code&gt; of the UART.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;name &amp;lt;name&amp;gt;&lt;/strong&gt; - change Bluetooth name of the module. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;baudrate &amp;lt;baudrate&amp;gt;&lt;/strong&gt; - change baudrate of the module. This baudrate is used when
  module communicates with Arduino.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use it firstly you need to connect your Arduino and HC-05 module together.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hardware Setup&lt;/strong&gt;. The Arduino will need to control power to the HC-05 module
and be able to set HIGH/LOW state on the pin 34 (or PIO11). This is required due
to the way HC-05 is switched to AT mode. Firstly, Arduino powers off the module
then it sets pin 34 into HIGH state and turns power on. After this HC-05 boot
into AT mode.&lt;/p&gt;
&lt;p&gt;
&lt;figure class="article-figure"&gt;&lt;img alt="Schematics of connection of HC-05 Bluetooth module and Arduino" src="images/008-schematics.png"&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The transistor can be any PNP transistor from your Arduino kit. Make sure that
it is PNP by googling its datasheet. I used &lt;code&gt;2N3906&lt;/code&gt;. The resistor also can
vary. It is needed to limit current going through the base of the transistor. I
picked 1000 Ohm one. I suppose that anything around 500 - 1500 Ohm would work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let's try this out!&lt;/strong&gt; Connect Arduino and HC-05 as shown in the schematics
above and flash the application to the Arduino (with &lt;a href="https://platformio.org/"&gt;platformio&lt;/a&gt; or Arduino
IDE). Then open serial monitor. You should see something like this:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b643a167-6cb3-11f0-bfa3-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b643a167-6cb3-11f0-bfa3-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;HCTOOLS. Version: 1.0 (f0341d1)&lt;/span&gt;
&lt;span class="gp"&gt;# &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;By default application assumes that module has baudrate set to &lt;code&gt;38400&lt;/code&gt; (the
default baudrate in AT mode). If you changed it previously then change it in the
application as well and re-upload it.&lt;/p&gt;
&lt;p&gt;Type &lt;code&gt;help&lt;/code&gt; into the application shell to see all the available commands.&lt;/p&gt;
&lt;h1 id="back-to-pc"&gt;Back to PC&lt;/h1&gt;
&lt;p&gt;So, after you set name for your module and configure it as a slave you can try
to setup wireless connection. Install Bluetooth stack:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b643ad2f-6cb3-11f0-ac73-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b643ad2f-6cb3-11f0-ac73-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;bluez&lt;span class="w"&gt; &lt;/span&gt;bluez-utils
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Next, lets check if kernel module is installed and loaded. For some chips it
will be enough to have &lt;code&gt;btusb&lt;/code&gt; loaded but for other chips (like my Broadcom)
you will need to find and install appropriate driver. You can check if &lt;code&gt;btusb&lt;/code&gt;
is loaded into the kernel by the following command:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b643ba80-6cb3-11f0-87e1-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b643ba80-6cb3-11f0-87e1-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;lsmod&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;btusb
&lt;span class="go"&gt;btusb                  65536  0&lt;/span&gt;
&lt;span class="go"&gt;btrtl                  24576  1 btusb&lt;/span&gt;
&lt;span class="go"&gt;btbcm                  16384  1 btusb&lt;/span&gt;
&lt;span class="go"&gt;btintel                32768  1 btusb&lt;/span&gt;
&lt;span class="go"&gt;bluetooth             675840  5 btrtl,btintel,btbcm,btusb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p class="note-right"&gt;
&lt;span class="note-sign"&gt;Note:&lt;/span&gt; 
In case you also have &lt;code&gt;Broadcom&lt;/code&gt; chip I would recommend to look into
this &lt;a href="https://askubuntu.com/questions/632336/bluetooth-broadcom-43142-isnt-working/632348#632348"&gt;instruction&lt;/a&gt;. It seems to be a common solution.
&lt;/p&gt;

&lt;p&gt;If there is nothing in the output you should try to install general Bluetooth
driver:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b643c893-6cb3-11f0-8cec-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b643c893-6cb3-11f0-8cec-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;btusb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;If it won't work try to find driver for your particular device. You can find out
some information about name of your Bluetooth chip with following commands:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b643d548-6cb3-11f0-968e-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b643d548-6cb3-11f0-968e-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;lsusb&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;Bluetooth
&lt;span class="go"&gt;... output is hidden ...&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;dmesg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;Bluetooth
&lt;span class="go"&gt;... output is hidden ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;After driver is installed and kernel module is loaded start and enable Bluetooth
service:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b643e495-6cb3-11f0-9c0e-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b643e495-6cb3-11f0-9c0e-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bluetooth.service
&lt;span class="gp"&gt;$ &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;start&lt;span class="w"&gt; &lt;/span&gt;bluetooth.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Check that service successfully started:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b643f3b6-6cb3-11f0-b3f6-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b643f3b6-6cb3-11f0-b3f6-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;status&lt;span class="w"&gt; &lt;/span&gt;bluetooth.service
&lt;span class="go"&gt;    ● bluetooth.service - Bluetooth service&lt;/span&gt;
&lt;span class="go"&gt;     Loaded: loaded (/usr/lib/systemd/system/bluetooth.service; disabled; vendor preset: disabled)&lt;/span&gt;
&lt;span class="go"&gt;     Active: active (running) since Thu 2020-02-20 19:35:07 CET; 23h ago&lt;/span&gt;
&lt;span class="go"&gt;       Docs: man:bluetoothd(8)&lt;/span&gt;
&lt;span class="go"&gt;   Main PID: 779 (bluetoothd)&lt;/span&gt;
&lt;span class="go"&gt;      Tasks: 1 (limit: 6990)&lt;/span&gt;
&lt;span class="go"&gt;     Memory: 2.7M&lt;/span&gt;
&lt;span class="go"&gt;     CGroup: /system.slice/bluetooth.service&lt;/span&gt;
&lt;span class="go"&gt;             └─779 /usr/lib/bluetooth/bluetoothd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p class="note-left"&gt;
&lt;span class="note-sign"&gt;Note:&lt;/span&gt; There should be - &lt;code&gt;Active: active (running)&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;Now, after you install the driver reset your PC/laptop. It really has to be 
power reset (power off -&amp;gt; power on) because during reboot your drivers could
still stay unloaded (you know just in case). After boot check output of
&lt;code&gt;dmesg&lt;/code&gt; it should be something similar to this:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b64403af-6cb3-11f0-af67-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b64403af-6cb3-11f0-af67-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;dmesg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;Bluetooth
&lt;span class="go"&gt;[    5.493394] Bluetooth: Core ver 2.22&lt;/span&gt;
&lt;span class="go"&gt;[    5.493415] Bluetooth: HCI device and connection manager initialized&lt;/span&gt;
&lt;span class="go"&gt;[    5.493420] Bluetooth: HCI socket layer initialized&lt;/span&gt;
&lt;span class="go"&gt;[    5.493422] Bluetooth: L2CAP socket layer initialized&lt;/span&gt;
&lt;span class="go"&gt;[    5.493426] Bluetooth: SCO socket layer initialized&lt;/span&gt;
&lt;span class="go"&gt;[    5.751843] Bluetooth: hci0: BCM: chip id 70&lt;/span&gt;
&lt;span class="go"&gt;[    5.752829] Bluetooth: hci0: BCM: features 0x06&lt;/span&gt;
&lt;span class="go"&gt;[    5.768841] Bluetooth: hci0: BCM43142A&lt;/span&gt;
&lt;span class="go"&gt;[    5.769833] Bluetooth: hci0: BCM43142A0 (001.001.011) build 0000&lt;/span&gt;
&lt;span class="go"&gt;[    6.489850] Bluetooth: hci0: BCM43142A0 (001.001.011) build 0215&lt;/span&gt;
&lt;span class="go"&gt;[    6.505851] Bluetooth: hci0: Broadcom Bluetooth Device (43142)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id="pairing-pc-with-the-hc-05-device"&gt;Pairing PC with the HC-05 device&lt;/h1&gt;
&lt;p&gt;First of all, I always try to connect to the HC-05 with Android phone. I used
&lt;a href="https://play.google.com/store/apps/details?id=de.kai_morich.serial_bluetooth_terminal&amp;amp;hl=en"&gt;Serial Bluetooth Terminal&lt;/a&gt; to connect and send some text to the module to
check that it's alive. It is always a good sign that everything going well. So,
in case you have one try that. Anyway, in the linux run &lt;code&gt;bluetoothctl&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6441364-6cb3-11f0-a904-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6441364-6cb3-11f0-a904-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;bluetoothctl
&lt;span class="go"&gt; Agent registered&lt;/span&gt;
&lt;span class="go"&gt; [CHG] Controller 80:56:F2:E5:43:E6 Pairable: yes&lt;/span&gt;
&lt;span class="gp"&gt;[bluetooth]# &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Make power reset of the HC-05 module and then turn on Bluetooth scan of nearby
devices on your PC:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b64420e0-6cb3-11f0-b670-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b64420e0-6cb3-11f0-b670-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;[bluetooth]# &lt;/span&gt;power&lt;span class="w"&gt; &lt;/span&gt;on
&lt;span class="go"&gt; Changing power on succeeded&lt;/span&gt;
&lt;span class="gp"&gt;[bluetooth]# &lt;/span&gt;scan&lt;span class="w"&gt; &lt;/span&gt;on
&lt;span class="go"&gt; Discovery started&lt;/span&gt;
&lt;span class="go"&gt; [CHG] Controller 80:56:F2:E5:43:E6 Discovering: yes&lt;/span&gt;
&lt;span class="go"&gt; [CHG] Device 78:BD:BC:D3:D5:68 RSSI: -92&lt;/span&gt;
&lt;span class="go"&gt; [CHG] Device 78:BD:BC:D3:D5:68 Name: [TV] UE40J6272&lt;/span&gt;
&lt;span class="go"&gt; [CHG] Device 78:BD:BC:D3:D5:68 Alias: [TV] UE40J6272&lt;/span&gt;
&lt;span class="go"&gt; [CHG] Device 00:13:EF:00:03:04 RSSI: -59&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The exact MAC address of the HC-05 can be obtained by the &lt;code&gt;AT+ADDR?&lt;/code&gt; command in
the &lt;code&gt;atmode&lt;/code&gt;. See application above👌.&lt;/p&gt;
&lt;p&gt;After something like HC-05 (&lt;code&gt;00:13:EF:00:03:04&lt;/code&gt; in my case) has appeared on the
screen you will need to make it trustworthy, pair it with your PC and try to
connect to it. That can be done by the following commands &lt;code&gt;trust &amp;lt;MAC&amp;gt;&lt;/code&gt;, &lt;code&gt;pair
&amp;lt;MAC&amp;gt;&lt;/code&gt; and &lt;code&gt;connect &amp;lt;MAC&amp;gt;&lt;/code&gt; accordingly.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6443056-6cb3-11f0-9091-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6443056-6cb3-11f0-9091-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;[bluetooth]# &lt;/span&gt;trust&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;:13:EF:00:03:04
&lt;span class="go"&gt; [CHG] Device 00:13:EF:00:03:04 Trusted: yes&lt;/span&gt;
&lt;span class="go"&gt; Changing 00:13:EF:00:03:04 trust succeeded&lt;/span&gt;
&lt;span class="gp"&gt;[bluetooth]# &lt;/span&gt;pair&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;:13:EF:00:03:04
&lt;span class="go"&gt; Attempting to pair with 00:13:EF:00:03:04&lt;/span&gt;
&lt;span class="go"&gt; Request PIN code&lt;/span&gt;
&lt;span class="go"&gt;[agent] Enter PIN code: 1234&lt;/span&gt;
&lt;span class="go"&gt; [CHG] Device 00:13:EF:00:03:04 UUIDs: 00001101-0000-1000-8000-00805f9b34fb&lt;/span&gt;
&lt;span class="go"&gt; [CHG] Device 00:13:EF:00:03:04 ServicesResolved: yes&lt;/span&gt;
&lt;span class="go"&gt; [CHG] Device 00:13:EF:00:03:04 Paired: yes&lt;/span&gt;
&lt;span class="go"&gt; Pairing successful&lt;/span&gt;
&lt;span class="gp"&gt;[bluetooth]# &lt;/span&gt;set-alias&lt;span class="w"&gt; &lt;/span&gt;mymodule
&lt;span class="go"&gt; [CHG] Device 00:13:EF:00:03:04 Alias: mymodule&lt;/span&gt;
&lt;span class="go"&gt; Changing mymodule succeeded&lt;/span&gt;
&lt;span class="gp"&gt;[bluetooth]# &lt;/span&gt;connect&lt;span class="w"&gt; &lt;/span&gt;mymodule
&lt;span class="go"&gt; Device mymodule not available&lt;/span&gt;
&lt;span class="go"&gt; [CHG] Device 00:13:EF:00:03:04 ServicesResolved: no&lt;/span&gt;
&lt;span class="go"&gt; [CHG] Device 00:13:EF:00:03:04 Connected: no&lt;/span&gt;
&lt;span class="go"&gt; [CHG] Device 00:13:EF:00:03:04 Connected: yes&lt;/span&gt;
&lt;span class="gp"&gt;[mymodyle]# &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;If you'd like to check if disconnect works:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6444527-6cb3-11f0-af6d-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6444527-6cb3-11f0-af6d-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;[mymodule]# &lt;/span&gt;disconnect
&lt;span class="go"&gt; Attempting to disconnect from 00:13:EF:00:03:04&lt;/span&gt;
&lt;span class="go"&gt; Successful disconnected&lt;/span&gt;
&lt;span class="go"&gt; [CHG] Device 00:13:EF:00:03:04 Connected: no&lt;/span&gt;
&lt;span class="gp"&gt;[bluetooth]# &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id="time-to-open-serial-monitor"&gt;Time to open serial monitor&lt;/h1&gt;
&lt;p&gt;The last step is to create serial port. The following command binds your
Bluetooth device with rfcomm device (&lt;code&gt;/dev/rmcomm0&lt;/code&gt; in this case). It won't
immediately connect to your HC-05 only when an application such as serial
monitor will use it. More about &lt;a href="https://www.amd.e-technik.uni-rostock.de/ma/gol/lectures/wirlec/bluetooth_info/rfcomm.html#Device%20Types"&gt;RFCOMM protocol and devices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, on some systems (e.g. Arch linux) &lt;code&gt;rfcomm&lt;/code&gt; utility can be in
status "deprecated" and won't be available in the official repository. Try to
find instruction of how to install it on your particular system (See &lt;a href="https://wiki.archlinux.org/index.php/bluetooth#Deprecated_BlueZ_tools"&gt;Arch
Wiki&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b644523d-6cb3-11f0-839e-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b644523d-6cb3-11f0-839e-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;rfcomm&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;bind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rfcomm0&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;MAC-OF-HC-05&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Now you should have serial port &lt;code&gt;/dev/rmcomm0&lt;/code&gt; which is attached to your
Bluetooth device. &lt;/p&gt;
&lt;p&gt;Let's test that it works. In another terminal open serial monitor attached to
Arduino with &lt;code&gt;HCTOOLS&lt;/code&gt; application and run &lt;code&gt;echo&lt;/code&gt; command:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6446049-6cb3-11f0-a7b4-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6446049-6cb3-11f0-a7b4-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;pio&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;nano&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;monitor
&lt;span class="go"&gt;...some output is hidden...&lt;/span&gt;
&lt;span class="go"&gt;--- Miniterm on /dev/ttyUSB0  115200,8,N,1 ---&lt;/span&gt;
&lt;span class="go"&gt;--- Quit: Ctrl+C | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H ---&lt;/span&gt;
&lt;span class="go"&gt;HCTOOLS. Version: 1.0&lt;/span&gt;
&lt;span class="gp"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;span class="go"&gt;Echoing every received character. CTRL-D to stop it.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Try to open serial monitor on the &lt;code&gt;rfcomm&lt;/code&gt; port and send something to the device:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6447063-6cb3-11f0-88b6-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6447063-6cb3-11f0-88b6-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;pio&lt;span class="w"&gt; &lt;/span&gt;device&lt;span class="w"&gt; &lt;/span&gt;monitor&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;/dev/rfcomm0&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;115200&lt;/span&gt;
&lt;span class="go"&gt;...long output is hidden...&lt;/span&gt;
&lt;span class="go"&gt;--- Miniterm on /dev/ttyUSB0  115200,8,N,1 ---&lt;/span&gt;
&lt;span class="go"&gt;--- Quit: Ctrl+C | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H ---&lt;/span&gt;
&lt;span class="go"&gt;Hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Now, if you send something to Arduino it will send it to HC-05 and then to your
&lt;code&gt;/dev/rfcomm0&lt;/code&gt; port. If you will send something to the &lt;code&gt;/dev/rfcomm0&lt;/code&gt; with a
newline it will send it back to you.&lt;/p&gt;
&lt;p&gt;
&lt;figure class="article-figure"&gt;&lt;img alt="HC-05 Bluetooth module" src="images/008-hc-05-overall.png"&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;That basically it. For convenience you can add a &lt;code&gt;udev&lt;/code&gt; rule to have a nice name
for your device instead of &lt;code&gt;/dev/rfcomm0&lt;/code&gt;.  The name is specified in the
&lt;code&gt;SYMLINK&lt;/code&gt; attribute. For example:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b644800d-6cb3-11f0-bd5b-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b644800d-6cb3-11f0-bd5b-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;/etc/udev/rules.d/80-blueled.rules&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="go"&gt;KERNEL==&amp;quot;rfcomm[0-9]&amp;quot;, SUBSYSTEM==&amp;quot;tty&amp;quot;, DRIVER==&amp;quot;&amp;quot;, ATTR{channel}==&amp;quot;1&amp;quot;, ATTR{address}==&amp;quot;00:13:ef:00:03:04&amp;quot;, SYMLINK+=&amp;quot;blueled&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;As you can see there is attributes of particular device. These attributes can be
found with following command:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6448dc7-6cb3-11f0-aa75-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6448dc7-6cb3-11f0-aa75-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;udevadm&lt;span class="w"&gt; &lt;/span&gt;info&lt;span class="w"&gt; &lt;/span&gt;--attribute-walk&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="o"&gt;=&lt;/span&gt;rfcomm0
&lt;span class="go"&gt;Udevadm info starts with the device specified by the devpath and then&lt;/span&gt;
&lt;span class="go"&gt;walks up the chain of parent devices. It prints for every device&lt;/span&gt;
&lt;span class="go"&gt;found, all possible attributes in the udev rules key format.&lt;/span&gt;
&lt;span class="go"&gt;A rule to match, can be composed by the attributes of the device&lt;/span&gt;
&lt;span class="go"&gt;and the attributes from one single parent device.&lt;/span&gt;

&lt;span class="go"&gt;  looking at device &amp;#39;/devices/virtual/tty/rfcomm0&amp;#39;:&lt;/span&gt;
&lt;span class="go"&gt;    KERNEL==&amp;quot;rfcomm0&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;    SUBSYSTEM==&amp;quot;tty&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;    DRIVER==&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;    ATTR{channel}==&amp;quot;1&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;    ATTR{address}==&amp;quot;00:13:ef:00:03:04&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Now your device should be available under &lt;code&gt;/dev/blueled&lt;/code&gt; path.&lt;/p&gt;
&lt;h2 id="troubleshooting-hc-05"&gt;Troubleshooting HC-05&lt;/h2&gt;
&lt;p&gt;There is list of problems which I faced during my attempts to configure
everything right.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The following messages in response to  &lt;code&gt;rfcomm bind&lt;/code&gt; command probably means
   that you don't have kernel module for RFCOMM protocol. Try to load it &lt;code&gt;sudo
   modprobe rfcomm&lt;/code&gt;. Also try to update the kernel.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Can't open RFCOMM control socket: Protocol not supported&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;bluetoothctl&lt;/code&gt; shows &lt;code&gt;No default controller available&lt;/code&gt; make sure that you
   have your driver installed and then run &lt;code&gt;bluetoothctl&lt;/code&gt; with &lt;code&gt;sudo&lt;/code&gt;
   (&lt;a href="https://stackoverflow.com/questions/48279646/bluetoothctl-no-default-controller-available"&gt;stackoverflow answer&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It can happen that other application is using Bluetooth and by doing so it
   will occupy Bluetooth controller (in my case it was &lt;code&gt;connman&lt;/code&gt;). You can
   unblock it by firstly stopping the suspected application and then running
   following command &lt;code&gt;rfkill unblock all&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b646767c-6cb3-11f0-9345-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b646767c-6cb3-11f0-9345-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;rfkill&lt;span class="w"&gt; &lt;/span&gt;list
&lt;span class="m"&gt;0&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;tpacpi_bluetooth_sw:&lt;span class="w"&gt; &lt;/span&gt;Bluetooth
&lt;span class="w"&gt;    &lt;/span&gt;Soft&lt;span class="w"&gt; &lt;/span&gt;blocked:&lt;span class="w"&gt; &lt;/span&gt;no
&lt;span class="w"&gt;    &lt;/span&gt;Hard&lt;span class="w"&gt; &lt;/span&gt;blocked:&lt;span class="w"&gt; &lt;/span&gt;no
&lt;span class="m"&gt;1&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;hci0:&lt;span class="w"&gt; &lt;/span&gt;Bluetooth
&lt;span class="w"&gt;    &lt;/span&gt;Soft&lt;span class="w"&gt; &lt;/span&gt;blocked:&lt;span class="w"&gt; &lt;/span&gt;yes
&lt;span class="w"&gt;    &lt;/span&gt;Hard&lt;span class="w"&gt; &lt;/span&gt;blocked:&lt;span class="w"&gt; &lt;/span&gt;no
&lt;span class="m"&gt;5&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;phy3:&lt;span class="w"&gt; &lt;/span&gt;Wireless&lt;span class="w"&gt; &lt;/span&gt;LAN
&lt;span class="w"&gt;    &lt;/span&gt;Soft&lt;span class="w"&gt; &lt;/span&gt;blocked:&lt;span class="w"&gt; &lt;/span&gt;no
&lt;span class="w"&gt;    &lt;/span&gt;Hard&lt;span class="w"&gt; &lt;/span&gt;blocked:&lt;span class="w"&gt; &lt;/span&gt;no
$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;rfkill&lt;span class="w"&gt; &lt;/span&gt;unblock&lt;span class="w"&gt; &lt;/span&gt;all
$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;rfkill&lt;span class="w"&gt; &lt;/span&gt;list
...
&lt;span class="m"&gt;1&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;hci0:&lt;span class="w"&gt; &lt;/span&gt;Bluetooth
&lt;span class="w"&gt;    &lt;/span&gt;Soft&lt;span class="w"&gt; &lt;/span&gt;blocked:&lt;span class="w"&gt; &lt;/span&gt;no
&lt;span class="w"&gt;    &lt;/span&gt;Hard&lt;span class="w"&gt; &lt;/span&gt;blocked:&lt;span class="w"&gt; &lt;/span&gt;no
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As always power on/off helped in a few cases 😀.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;A lot of information about Bluetooth is available on the &lt;a href="https://wiki.archlinux.org/index.php/Bluetooth"&gt;Arch Linux Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.aliexpress.com/wholesale?catId=0&amp;amp;SearchText=HC-05+Bluetooth"&gt;HC-05 Bluetooth modules on Aliexpress (non-referal link)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alberand/hctools"&gt;HC-05 configuration tool on Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/questions/632336/bluetooth-broadcom-43142-isnt-working/632348#632348"&gt;How to fix Bluetooth with Broadcom chip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Bluetooth"&gt;Arch Linux Wiki - Bluetooth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amd.e-technik.uni-rostock.de/ma/gol/lectures/wirlec/bluetooth_info/rfcomm.html#Device%20Types"&gt;RFCOMM Protocol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;script&gt;
    switchToVertMobile = function () {
            document.getElementById("schematics").style["margin"] = "30px 0";
            document.getElementById("schematics").style["padding"] = "0 20px";
            document.querySelector('div.highlight:nth-child(31)').setAttribute('style', 'margin: 0;')
    };

    switchToHorMobile = function () {
            document.getElementById("schematics").style["margin"] = "30px 0";
            document.getElementById("schematics").style["padding"] = "0 20px";
            document.querySelector('div.highlight:nth-child(31)').setAttribute('style', 'margin: 0;')
    };

    switchToDesktop = function () {
            document.getElementById("schematics").style["margin"] = "30px 0 30px -40px";
            document.getElementById("schematics").style["padding"] = "0";
            document.querySelector('div.highlight:nth-child(31)').setAttribute('style', 'margin: 0 -50px 0 -50px;')
    };

    // make em wide
&lt;/script&gt;
&lt;/script&gt;
&lt;style&gt;
h3 {
    margin: 30px 0;
}
&lt;/style&gt;</content><category term="Article"></category><category term="arduino"></category><category term="hc-05"></category><category term="bluetooth"></category><category term="linux"></category></entry><entry><title>Setup Zephyr OS for STM32 Nucleo</title><link href="https://alberand.com/setup-zephyr-os-for-stm32-nucleo.html" rel="alternate"></link><published>2020-02-15T00:00:00+01:00</published><updated>2020-01-03T00:00:00+01:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2020-02-15:/setup-zephyr-os-for-stm32-nucleo.html</id><summary type="html">&lt;p&gt;Setting up and running Zephyr RTOS for STM32 Nucleo&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few month ago I get a free STM32 Nucleo board from ST Microelectronics at
Nuremberg's &lt;a href="https://www.embedded-world.de/en"&gt;Embedded World&lt;/a&gt;. I was thinking about buying one but didn't have any
excuse to do it. As I got one I started to look on one of the real-time OS
which catch my attention a long time ago - &lt;a href="https://www.zephyrproject.org/"&gt;Zephyr OS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After a first look it appeared to me as nicely design OS with rapidly growing
number of features. The other thing which I noticed is that the list of
supported boards is enormously big, it can come handy in the future. Moreover,
it is under intense development by the Intel corporation which means that it
won't die in a few years (I hope 😀).&lt;/p&gt;
&lt;p&gt;In this note I will describe process of setting up development environment
for STM32 Nucleo (particularly for STM32L010RB) board with Zephyr OS. Later
I would like to add testing setup too.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#environment-setup"&gt;Environment setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#zephyr-os-in-qemu-simulation"&gt;Zephyr OS in QEMU simulation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#compiling-and-running-hello-world-example"&gt;Compiling and running "Hello World" example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-application-for-zephyr-os"&gt;Creating application for Zephyr OS&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#update-use-official-getting-started"&gt;Update - Use official getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="environment-setup"&gt;Environment setup&lt;/h2&gt;
&lt;p&gt;Firstly, install dependencies:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61b3829-6cb3-11f0-8664-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61b3829-6cb3-11f0-8664-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--no-install-recommends&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;cmake&lt;span class="w"&gt; &lt;/span&gt;ninja-build&lt;span class="w"&gt; &lt;/span&gt;gperf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;ccache&lt;span class="w"&gt; &lt;/span&gt;dfu-util&lt;span class="w"&gt; &lt;/span&gt;device-tree-compiler&lt;span class="w"&gt; &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;python3-pip&lt;span class="w"&gt; &lt;/span&gt;python3-setuptools&lt;span class="w"&gt; &lt;/span&gt;python3-tk&lt;span class="w"&gt; &lt;/span&gt;python3-wheel&lt;span class="w"&gt; &lt;/span&gt;xz-utils&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;gcc&lt;span class="w"&gt; &lt;/span&gt;gcc-multilib&lt;span class="w"&gt; &lt;/span&gt;g++-multilib&lt;span class="w"&gt; &lt;/span&gt;libsdl2-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p class="note-right"&gt;
&lt;span class="note-sign"&gt;Note:&lt;/span&gt; Commonly used notation for shell commands is &lt;code&gt;$&lt;/code&gt; - commands executed
by normal user and &lt;code&gt;#&lt;/code&gt; commands executed as root
&lt;/p&gt;

&lt;p&gt;Then, install Zephyr's &lt;code&gt;west&lt;/code&gt; tool. It is basically Python utility to help you
manage source codes and configuration of your repositories. To install it use
&lt;code&gt;pip&lt;/code&gt; (Python's package manager):&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61b4f21-6cb3-11f0-91dd-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61b4f21-6cb3-11f0-91dd-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;pip3&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--user&lt;span class="w"&gt; &lt;/span&gt;west
&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;export PATH=~/.local/bin:&amp;quot;$PATH&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bashrc
&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Now we can get zephyr source code (it will take sometime ~ 300 Mb):&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61b5e34-6cb3-11f0-ad23-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61b5e34-6cb3-11f0-ad23-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;west&lt;span class="w"&gt; &lt;/span&gt;init&lt;span class="w"&gt; &lt;/span&gt;stm-testbed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Next update all submodules and install all the required python packages:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61b6987-6cb3-11f0-a822-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61b6987-6cb3-11f0-a822-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;stm-testbed
&lt;span class="gp"&gt;$ &lt;/span&gt;west&lt;span class="w"&gt; &lt;/span&gt;update
&lt;span class="gp"&gt;$ &lt;/span&gt;pip3&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--user&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;zephyr/scripts/requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Lastly, we need to setup the zephyr-SDK (compilers and tools to build Zephyr).&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61b77b8-6cb3-11f0-9bc6-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61b77b8-6cb3-11f0-9bc6-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.11.1/zephyr-sdk-0.11.1-setup.run
&lt;span class="gp"&gt;$ &lt;/span&gt;sh&lt;span class="w"&gt; &lt;/span&gt;zephyr-sdk-0.10.0-setup.run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The script will guide you through the installation process. The last thing to do
is to define two environment variables which will be later used by the Zephyr's
build system&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61b8401-6cb3-11f0-8d09-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61b8401-6cb3-11f0-8d09-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ZEPHYR_TOOLCHAIN_VARIANT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;zephyr
&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ZEPHYR_SDK_INSTALL_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;sdk&lt;span class="w"&gt; &lt;/span&gt;installation&lt;span class="w"&gt; &lt;/span&gt;directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;I also added them to my &lt;code&gt;~/.bashrc&lt;/code&gt; to not export them every time. I forgot to
do it a few times and spend too much time looking for such a simple problem.&lt;/p&gt;
&lt;h2 id="zephyr-os-in-qemu-simulation"&gt;Zephyr OS in QEMU simulation&lt;/h2&gt;
&lt;p&gt;Zephyr is ready for compilation. The developers thought about further
application development and testing so they added support of Qemu as default
build target. Therefore, if you have &lt;a href="https://www.qemu.org/"&gt;Qemu&lt;/a&gt; installed you can immediately
start to play with the system API.&lt;/p&gt;
&lt;p&gt;Firstly, before building an application, we need to configure environment for
the Zephyr. Luckily, it is simple - just &lt;code&gt;source&lt;/code&gt; the &lt;code&gt;zephyr-env.sh&lt;/code&gt;
script:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61b91e9-6cb3-11f0-8730-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61b91e9-6cb3-11f0-8730-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;stm-testbed/zephyr
&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;zephyr-env.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Next, let's run provided &lt;code&gt;hello_world&lt;/code&gt; application. Go to the following
directory and create &lt;code&gt;build&lt;/code&gt; directory:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61b9db8-6cb3-11f0-8884-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61b9db8-6cb3-11f0-8884-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;samples/hello_world/
&lt;span class="gp"&gt;$ &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Now we will use &lt;code&gt;cmake&lt;/code&gt; to prepare application for build (create &lt;code&gt;cmake&lt;/code&gt; cache
file). As we want to run application in &lt;code&gt;Qemu&lt;/code&gt; we need to tell &lt;code&gt;cmake&lt;/code&gt; about it
with defining variable &lt;code&gt;BOARD&lt;/code&gt; (with -D flag):&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61bab37-6cb3-11f0-9d17-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61bab37-6cb3-11f0-9d17-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;cmake&lt;span class="w"&gt; &lt;/span&gt;-GNinja&lt;span class="w"&gt; &lt;/span&gt;-DBOARD&lt;span class="o"&gt;=&lt;/span&gt;qemu_x86&lt;span class="w"&gt; &lt;/span&gt;..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-GNunja&lt;/code&gt; arguments tells &lt;code&gt;cmake&lt;/code&gt; that later we will build our application
with &lt;a href="https://ninja-build.org/"&gt;Ninja&lt;/a&gt; building system. The last &lt;code&gt;..&lt;/code&gt; is just path to the upper
directory.  Then, build and run it with &lt;code&gt;ninja&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61bb7c8-6cb3-11f0-bbf0-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61bb7c8-6cb3-11f0-bbf0-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;ninja
&lt;span class="gp"&gt;$ &lt;/span&gt;ninja&lt;span class="w"&gt; &lt;/span&gt;run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;You should see something similar:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61bc509-6cb3-11f0-89b3-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61bc509-6cb3-11f0-89b3-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SeaBIOS (version rel-1.12.0-0-ga698c8995f-prebuilt.qemu.org)
Booting from ROM..***** Booting Zephyr OS zephyr-v1.14.0-783-g021e27cfed46 *****
Hello World! qemu_x86
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The last line is our application. Hurray!&lt;/p&gt;
&lt;p class="note-left"&gt;
&lt;span class="note-sign"&gt;Note: &lt;/span&gt;To exit from Qemu press &lt;code&gt;CTRL + A&lt;/code&gt; and then &lt;code&gt;X&lt;/code&gt;
&lt;/p&gt;

&lt;h2 id="compiling-and-running-hello-world-example"&gt;Compiling and running "Hello World" example&lt;/h2&gt;
&lt;p&gt;Now let's try it on the real hardware. Clean the build directory and
re-generate cmake cache for your STM32 board.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61bcef2-6cb3-11f0-987c-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61bcef2-6cb3-11f0-987c-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;ninja&lt;span class="w"&gt; &lt;/span&gt;clean
&lt;span class="gp"&gt;$ &lt;/span&gt;cmake&lt;span class="w"&gt; &lt;/span&gt;-GNinja&lt;span class="w"&gt; &lt;/span&gt;-DBOARD&lt;span class="o"&gt;=&lt;/span&gt;nucleo_l073rz&lt;span class="w"&gt; &lt;/span&gt;..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Connect your board to the PC and check that it appeard in the &lt;code&gt;/dev&lt;/code&gt; directory
(mine is &lt;code&gt;/dev/ttyACM0&lt;/code&gt;). Compile and flash application to the board:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61be035-6cb3-11f0-aff2-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61be035-6cb3-11f0-aff2-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;ninja
&lt;span class="gp"&gt;$ &lt;/span&gt;ninja&lt;span class="w"&gt; &lt;/span&gt;flash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Run some serial monitor at &lt;code&gt;/dev/ttyACM0&lt;/code&gt;, &lt;code&gt;115200 8N1&lt;/code&gt; to check if firmware was
correctly uploaded. I use &lt;code&gt;minicom&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61bec5d-6cb3-11f0-8640-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61bec5d-6cb3-11f0-8640-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;minicom&lt;span class="w"&gt; &lt;/span&gt;-s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Press reset button on the DevKit and you should see similar message:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61bf9b9-6cb3-11f0-87c9-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61bf9b9-6cb3-11f0-87c9-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;***** Booting Zephyr OS zephyr-v1.14.0-783-g021e27cfed46 *****
Hello World! nucleo_l073rz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id="creating-application-for-zephyr-os"&gt;Creating application for Zephyr OS&lt;/h2&gt;
&lt;p&gt;In Zephyr world the build system is application-centric. That means that your
application is entry point in the build process. That, in turn, means that you
can control the way Zephyr OS is build from your application building process.&lt;/p&gt;
&lt;p&gt;Zephyr is installed separately somewhere in the system. So, you use it as a
library. I suppose that they choose this way to simplify the process of
configuration management and building of the kernel.&lt;/p&gt;
&lt;p&gt;As an examples let's create simple application based on blinky example. First of
all create working directory and &lt;code&gt;cmake&lt;/code&gt;'s project file:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61c039c-6cb3-11f0-8f30-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61c039c-6cb3-11f0-8f30-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;app&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;app
&lt;span class="gp"&gt;$ &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;src
&lt;span class="gp"&gt;$ &lt;/span&gt;touch&lt;span class="w"&gt; &lt;/span&gt;CMakeLists.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Put the following configuration into the &lt;code&gt;CMakeList.txt&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61c2b3a-6cb3-11f0-8fdd-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61c2b3a-6cb3-11f0-8fdd-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# Boilerplate code, which pulls in the Zephyr build system.&lt;/span&gt;
&lt;span class="nb"&gt;cmake_minimum_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;VERSION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;3.13.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$ENV{&lt;/span&gt;&lt;span class="nv"&gt;ZEPHYR_BASE&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/cmake/app/boilerplate.cmake&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;NO_POLICY_SCOPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;my_zephyr_app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Add your source file to the &amp;quot;app&amp;quot; target. This must come after&lt;/span&gt;
&lt;span class="c"&gt;# the boilerplate code, which defines the target.&lt;/span&gt;
&lt;span class="nb"&gt;target_sources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;PRIVATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;src/main.c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Then copy source code of provided blinky example. Go back to the &lt;code&gt;zephyr&lt;/code&gt;
folder and then take &lt;code&gt;samples/basic/blinky/src/main.c&lt;/code&gt; and copy &lt;code&gt;main.c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now connect your board and run &lt;code&gt;ninja flash&lt;/code&gt;. It should compile and upload
application, built-in LED will start blinking.&lt;/p&gt;
&lt;p&gt;
&lt;figure class="article-figure"&gt;&lt;img alt="Zephyr RTOS blinky app" src="images/stm32-zephyr.gif"&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;As you can see it is quite convenient to manage your application as it is
completely separate from source code of the OS.&lt;/p&gt;
&lt;h4 id="update-use-official-getting-started"&gt;Update - Use official getting started&lt;/h4&gt;
&lt;p&gt;In the time when I started writing this article the official getting started was
a little bit hard to follow. However, now it is so concise and simple that I
would recommend to follow official &lt;a href="https://docs.zephyrproject.org/latest/getting_started/index.html"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="references"&gt;References&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zephyrproject.org/"&gt;Zephyr RTOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.st.com/en/evaluation-tools/nucleo-l010rb.html"&gt;STM32 Nucleo (STM32L010RB)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.qemu.org/"&gt;QEMU - processor emulator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ninja-build.org/"&gt;Ninja Build System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.embedded-world.de/en"&gt;Embedded World - Nuremberg, Germany&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Article"></category><category term="stm32"></category><category term="zephyr"></category></entry><entry><title>What is pragma weak (GCC)?</title><link href="https://alberand.com/weak-directive.html" rel="alternate"></link><published>2019-12-16T00:00:00+01:00</published><updated>2020-01-15T00:00:00+01:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2019-12-16:/weak-directive.html</id><summary type="html">&lt;p&gt;Using Linker's directive '#pragma weak' to define optional functions or use it for debugging&lt;/p&gt;</summary><content type="html">&lt;p&gt;From this very &lt;a href="http://cseweb.ucsd.edu/~ricko/CSE131/the%20inside%20story%20on%20shared%20libraries%20and%20dynamic%20loading.pdf"&gt;interesting article&lt;/a&gt; about linking of executables I found out
that there exist a &lt;code&gt;#pragma weak foofunction&lt;/code&gt; directive. It tells linker to
handle the function as weakly defined. What it means is that if linker
fails to find definition (implementation) of the function it will skip the
function and won't show any errors. In this note I will demonstrate how does it
work.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#example-application"&gt;Example Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-does-pragma-weak-does"&gt;What does #pragma weak does?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#look-inside"&gt;Look inside&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#thoughts"&gt;Thoughts&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="example-application"&gt;Example Application&lt;/h1&gt;
&lt;p&gt;Let's create a simple example:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6195504-6cb3-11f0-a9d6-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6195504-6cb3-11f0-a9d6-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#pragma weak debug&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;debugfunc&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debugfunc&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;debugfunc&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;At line 2 we define debug function with an &lt;code&gt;extern&lt;/code&gt; keyword. That means that
this function can be defined in any of the application source files (or in any
object file). The next line contains pointer (named &lt;code&gt;debugfunc&lt;/code&gt;) to this
function.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;main()&lt;/code&gt; in the if-condition we check that if &lt;code&gt;debugfunc&lt;/code&gt; have anything
but zero. If it is not zero we call it, otherwise application terminates.&lt;/p&gt;
&lt;p&gt;Next, let's create second file with the implementation of &lt;code&gt;debug&lt;/code&gt; function. It
is very very simple:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b619747c-6cb3-11f0-b1b1-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b619747c-6cb3-11f0-b1b1-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;stdio.h&amp;quot;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[DEBUG] %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h1 id="what-does-pragma-weak-does"&gt;What does #pragma weak does?&lt;/h1&gt;
&lt;p&gt;See what happens if we compile &lt;code&gt;main.c&lt;/code&gt; only:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6198993-6cb3-11f0-8a00-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6198993-6cb3-11f0-8a00-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;andrew&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;andrew-laptop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/tmp/mainfun
➔&lt;span class="w"&gt; &lt;/span&gt;gcc&lt;span class="w"&gt; &lt;/span&gt;-Wall&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;app&lt;span class="w"&gt; &lt;/span&gt;main.c

andrew&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;andrew-laptop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/tmp/mainfun
➔&lt;span class="w"&gt; &lt;/span&gt;./app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Nothing =). But if we compile &lt;code&gt;debug.c&lt;/code&gt; and then link it together with newly
compiled &lt;code&gt;main.c&lt;/code&gt;, then:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6199aa7-6cb3-11f0-a5df-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6199aa7-6cb3-11f0-a5df-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;andrew&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;andrew-laptop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/tmp/mainfun
➔&lt;span class="w"&gt; &lt;/span&gt;gcc&lt;span class="w"&gt; &lt;/span&gt;-Wall&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;main.c

andrew&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;andrew-laptop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/tmp/mainfun
➔&lt;span class="w"&gt; &lt;/span&gt;gcc&lt;span class="w"&gt; &lt;/span&gt;-Wall&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;debug.c

andrew&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;andrew-laptop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/tmp/mainfun
➔&lt;span class="w"&gt; &lt;/span&gt;gcc&lt;span class="w"&gt; &lt;/span&gt;-Wall&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;app&lt;span class="w"&gt; &lt;/span&gt;main.o&lt;span class="w"&gt; &lt;/span&gt;debug.o

andrew&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;andrew-laptop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/tmp/mainfun
➔&lt;span class="w"&gt; &lt;/span&gt;./app
&lt;span class="o"&gt;[&lt;/span&gt;DEBUG&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Note that to compile files separately without linking you need to use &lt;code&gt;-c&lt;/code&gt;
argument.&lt;/p&gt;
&lt;p&gt;In the first case linker couldn't find implementation for &lt;code&gt;debug()&lt;/code&gt; and replace it
with zero. Therefore, in all places where we reference &lt;code&gt;debug()&lt;/code&gt; we get
zero. As &lt;code&gt;debugfunc&lt;/code&gt; pointer points to the &lt;code&gt;debug()&lt;/code&gt; and also contains 0 it's
not called.  In the second case linker found implementation for &lt;code&gt;debug()&lt;/code&gt; and
treat it as a normal function. In this case &lt;code&gt;debugfunc&lt;/code&gt; is pointing to the
&lt;code&gt;debug()&lt;/code&gt; (non-zero address in memory) and therefore will be called.&lt;/p&gt;
&lt;h1 id="look-inside"&gt;Look inside&lt;/h1&gt;
&lt;p&gt;Let's look what is really happening in the binaries and if it is true what is
described in the previous paragraph. Firstly, let's compile both examples as two
separated binaries for further comparison:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b619b4b5-6cb3-11f0-bd82-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b619b4b5-6cb3-11f0-bd82-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;andrew&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;andrew-laptop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/tmp/mainfun
➔&lt;span class="w"&gt; &lt;/span&gt;gcc&lt;span class="w"&gt; &lt;/span&gt;-Wall&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;app&lt;span class="w"&gt; &lt;/span&gt;main.o

andrew&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;andrew-laptop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/tmp/mainfun
➔&lt;span class="w"&gt; &lt;/span&gt;gcc&lt;span class="w"&gt; &lt;/span&gt;-Wall&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;appd&lt;span class="w"&gt; &lt;/span&gt;main.o&lt;span class="w"&gt; &lt;/span&gt;debug.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Next let's look what is the difference between them. With &lt;code&gt;nm&lt;/code&gt; utility we can see
that in the first binary there no &lt;code&gt;debug&lt;/code&gt; symbol (reference to the function) at
all.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b619c780-6cb3-11f0-a61e-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b619c780-6cb3-11f0-a61e-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;andrew&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;andrew-laptop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/tmp/mainfun
➔&lt;span class="w"&gt; &lt;/span&gt;nm&lt;span class="w"&gt; &lt;/span&gt;app&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;debug
&lt;span class="m"&gt;0000000000004028&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;D&lt;span class="w"&gt; &lt;/span&gt;debugfunc

andrew&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;andrew-laptop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/tmp/mainfun
➔&lt;span class="w"&gt; &lt;/span&gt;nm&lt;span class="w"&gt; &lt;/span&gt;appd&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;debug
&lt;span class="m"&gt;0000000000001160&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;T&lt;span class="w"&gt; &lt;/span&gt;debug
&lt;span class="m"&gt;0000000000004030&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;D&lt;span class="w"&gt; &lt;/span&gt;debugfunc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Actually, there quite a lot of small discrepancies between two binaries. You can
look on the differences with the following command:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b619dda7-6cb3-11f0-a681-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b619dda7-6cb3-11f0-a681-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;andrew&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;andrew-laptop&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/tmp/mainfun
➔&lt;span class="w"&gt; &lt;/span&gt;vimdiff&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;objdump&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;app&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;objdump&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;appd&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Disassembly of the main function should be similar to this:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b619ef3f-6cb3-11f0-a910-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b619ef3f-6cb3-11f0-a910-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;0000000000001119 &amp;lt;main&amp;gt;:
    1119:       55                      push   %rbp
    111a:       48 89 e5                mov    %rsp,%rbp
    111d:       48 8b 05 04 2f 00 00    mov    0x2f04(%rip),%rax    # 4028 &amp;lt;debugfunc&amp;gt;
    1124:       48 85 c0                test   %rax,%rax
    1127:       74 10                   je     1139 &amp;lt;main+0x20&amp;gt;
    1129:       48 8b 05 f8 2e 00 00    mov    0x2ef8(%rip),%rax    # 4028 &amp;lt;debugfunc&amp;gt;
    1130:       48 8d 3d cd 0e 00 00    lea    0xecd(%rip),%rdi     # 2004 &amp;lt;_IO_stdin_used+0x4&amp;gt;
    1137:       ff d0                   callq  *%rax
    1139:       b8 00 00 00 00          mov    $0x0,%eax
    113e:       5d                      pop    %rbp
    113f:       c3                      retq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The first two instruction are used to save address of the previous stack frame
and switch to the frame local the current function (for more info see &lt;a href="https://stackoverflow.com/questions/41912684/what-is-the-purpose-of-the-rbp-register-in-x86-64-assembler"&gt;[4]&lt;/a&gt;).
The third one moves value located at address 0x4028 to the %rax register. This, in
turn, is used in the following &lt;code&gt;test&lt;/code&gt; instruction which checks if it is equals
to zero and if so it sets &lt;code&gt;ZF&lt;/code&gt; flag to 1 &lt;a href="https://en.wikipedia.org/wiki/TEST_(x86_instruction)"&gt;[5]&lt;/a&gt;. The next instruction &lt;code&gt;je&lt;/code&gt;
jumps to the address 1139 if &lt;code&gt;ZF&lt;/code&gt; flag is equal to 1. The 1139 address is the
end of the function (&lt;code&gt;return 0;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The 0x4028 address is equal to 0x2f04 + %rip (0x1124 - the address of the next
instruction). The %rip is used for relative referencing (see &lt;a href="https://stackoverflow.com/questions/29421766/what-does-mov-offsetrip-rax-do"&gt;[6]&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;What is located at address 0x4028? As we know that it is global static variable
it should be somewhere in the &lt;code&gt;.data&lt;/code&gt; section. We can find it out with following
command:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b619faac-6cb3-11f0-9ed9-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b619faac-6cb3-11f0-9ed9-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;➔&lt;span class="w"&gt; &lt;/span&gt;objdump&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;.data&lt;span class="w"&gt; &lt;/span&gt;app
app:&lt;span class="w"&gt;     &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;format&lt;span class="w"&gt; &lt;/span&gt;elf64-x86-64

Contents&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;section&lt;span class="w"&gt; &lt;/span&gt;.data:
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4018&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;20400000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;........&lt;span class="w"&gt; &lt;/span&gt;@......
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4028&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;........
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;As you can see it is all zeros. So, ZF will be 0 and &lt;code&gt;je&lt;/code&gt; will jump to 1139.&lt;/p&gt;
&lt;p&gt;In opposite case if there was something at 4028 then %rax wasn't zero, ZF was set
to zero and &lt;code&gt;je&lt;/code&gt; didn't jump. Even though the second binary has a little bit
different addresses the &lt;code&gt;main()&lt;/code&gt; is completely the same.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61a109b-6cb3-11f0-a062-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61a109b-6cb3-11f0-a062-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;0000000000001139 &amp;lt;main&amp;gt;:
    1139:       55                      push   %rbp
    113a:       48 89 e5                mov    %rsp,%rbp
    113d:       48 8b 05 ec 2e 00 00    mov    0x2eec(%rip),%rax    # 4030 &amp;lt;debugfunc&amp;gt;
    1144:       48 85 c0                test   %rax,%rax
    1147:       74 10                   je     1159 &amp;lt;main+0x20&amp;gt;
    1149:       48 8b 05 e0 2e 00 00    mov    0x2ee0(%rip),%rax    # 4030 &amp;lt;debugfunc&amp;gt;
    1150:       48 8d 3d ad 0e 00 00    lea    0xead(%rip),%rdi     # 2004 &amp;lt;_IO_stdin_used+0x4&amp;gt;
    1157:       ff d0                   callq  *%rax
    1159:       b8 00 00 00 00          mov    $0x0,%eax
    115e:       5d                      pop    %rbp
    115f:       c3                      retq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The address of the to which &lt;code&gt;debugfunc&lt;/code&gt; points is 0x4030. Again, let's use
&lt;code&gt;objdump&lt;/code&gt; to see what is in the &lt;code&gt;.data&lt;/code&gt; section:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b61a1c0b-6cb3-11f0-80cc-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b61a1c0b-6cb3-11f0-80cc-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;➔&lt;span class="w"&gt; &lt;/span&gt;objdump&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;.data&lt;span class="w"&gt; &lt;/span&gt;appd

appd:&lt;span class="w"&gt;     &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;format&lt;span class="w"&gt; &lt;/span&gt;elf64-x86-64

Contents&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;section&lt;span class="w"&gt; &lt;/span&gt;.data:
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4020&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;28400000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;........&lt;span class="o"&gt;(&lt;/span&gt;@......
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4030&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;60110000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;00000000&lt;/span&gt;&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;.......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id="thoughts"&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Personally, I don't think that it is a good approach to base your debugging
function on this directive. As initially it was created for backward
compatibility and general definition of function in the libraries (function
overriding) &lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Weak-Pragmas.html"&gt;[2]&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Weak_symbol"&gt;[3]&lt;/a&gt;. But if you are using third party library
with weak function you can define your for debugging.&lt;/p&gt;
&lt;p&gt;I search through some GNU project and other projects for the use-cases of this
directive. It seems like it is not commonly used. Only in some specific
cases, for example, in &lt;code&gt;pthreadlib&lt;/code&gt; and &lt;code&gt;musl-libc&lt;/code&gt;. However, I think it is very
convenient and interesting way to disable/enable debugging or development
features. Maybe in future I will find a way how to use it.&lt;/p&gt;
&lt;h4 id="references"&gt;References&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cseweb.ucsd.edu/~ricko/CSE131/the%20inside%20story%20on%20shared%20libraries%20and%20dynamic%20loading.pdf"&gt;The inside story on shared libraries and dynamic loading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Weak-Pragmas.html"&gt;GCC docs - Weak Pragmas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Weak_symbol"&gt;Wikipedia - Weak Symbol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/41912684/what-is-the-purpose-of-the-rbp-register-in-x86-64-assembler"&gt;Stackoverflow question about stack frames&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/TEST_(x86_instruction)"&gt;TEST (x86 Instruction)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/29421766/what-does-mov-offsetrip-rax-do"&gt;What does “mov offset(%rip), %rax” do?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;script&gt;
document.querySelector('div.highlight:nth-child(24)').setAttribute('style', 'margin: 0 -50px 0 -50px;')
document.querySelector('div.highlight:nth-child(31)').setAttribute('style', 'margin: 0 -50px 0 -50px;')
&lt;/script&gt;</content><category term="Article"></category><category term="linker"></category><category term="pragma"></category><category term="gcc"></category></entry><entry><title>Disable internet connection on Windows</title><link href="https://alberand.com/toggle-network-on-windows.html" rel="alternate"></link><published>2018-11-11T00:00:00+01:00</published><updated>2018-11-11T00:00:00+01:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2018-11-11:/toggle-network-on-windows.html</id><summary type="html">&lt;p&gt;Enable/Disable internet connection on Windows&lt;/p&gt;</summary><content type="html">&lt;p&gt;One time I was testing a JavaScript application which had an offline mode. That
application was running in browser and was communicating with a remote server. &lt;/p&gt;
&lt;p&gt;I wanted to test it in offline mode. By that I mean loading an application and
imitating network disconnection. In the Google Chrome you can do it easily
from the Developer console. However, in Mozilla Firefox and Internet Explorer it
is much harder; at least I didn't find any functionality for this. Moreover, as
I use it in Selenium tests I wanted a solution which is browser independent and
can be fully automated.&lt;/p&gt;
&lt;p&gt;I decide to disable internet connection on the operating system level (Windows)
as it definitely would work for everything. The most straightforward way is to
just disable network interface. But, I find out that it requires administrator
privileges which aren't granted when you run it from other program without
privileges. And, of course, it's not a good idea to run your tests as an
administrator.&lt;/p&gt;
&lt;h4 id="solution"&gt;Solution&lt;/h4&gt;
&lt;p&gt;In Windows you can create system task which in turn runs script to disable
network. As this script is run by system task it has all required privileges.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6121a98-6cb3-11f0-8450-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6121a98-6cb3-11f0-8450-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;SET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;interface&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ethernet&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;netsh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=%&lt;/span&gt;&lt;span class="nv"&gt;interface&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;findstr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;R&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;C&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Administrative state:&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;findstr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;C&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Enabled&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nv"&gt;errorlevel&lt;/span&gt;&lt;span class="o"&gt;%==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Disabled&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;netsh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=%&lt;/span&gt;&lt;span class="nv"&gt;interface&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;Enabled&lt;/span&gt;
&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Enabled&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;netsh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=%&lt;/span&gt;&lt;span class="nv"&gt;interface&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;Disabled&lt;/span&gt;
&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Put it somewhere near your tests and set it up as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;interface&lt;/code&gt; to name of your Ethernet interface (in script)&lt;/li&gt;
&lt;li&gt;Open "Task Scheduler"&lt;/li&gt;
&lt;li&gt;Click "Create Task"&lt;/li&gt;
&lt;li&gt;Set name of the task to "toggle_connection"&lt;/li&gt;
&lt;li&gt;Check checkbox "Run with highest privileges"&lt;/li&gt;
&lt;li&gt;Go to "Triggers" tab and create trigger "At task creation/modification"&lt;/li&gt;
&lt;li&gt;Go to "Actions" tab and create action "Start a program" with link to script&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's all! Now you can toggle your internet connection from Command prompt by
this command:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6123ab7-6cb3-11f0-a28a-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6123ab7-6cb3-11f0-a28a-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    schtasks /Run /TN toggle_connection
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Now, you can run this as system command from your program (in my case it is
Python script) to toggle network connection.&lt;/p&gt;
&lt;div style="width:300px; text-align:center; margin: 0 auto;"&gt;
&lt;a href="https://alberand.com/materials/win_toggle_connection.tar"&gt;Download scripts&lt;/a&gt;
&lt;/div&gt;

&lt;h5 id="references"&gt;References&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.seleniumhq.org/"&gt;Selenium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Article"></category><category term="Windows"></category><category term="networking"></category></entry><entry><title>Handling file dialog in Selenium tests (Windows &amp; Linux)</title><link href="https://alberand.com/selenium-file-dialog.html" rel="alternate"></link><published>2018-10-22T00:00:00+02:00</published><updated>2018-10-22T00:00:00+02:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2018-10-22:/selenium-file-dialog.html</id><summary type="html">&lt;p&gt;How to handle file dialog in any browser with Selenium framework.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Selenium is awesome automation tool for testing your website and simulating
user's actions. I used it for a few times and found one important feature which
is missing - as far as I know it is impossible to handle "Open File" or "Save
File" dialog:&lt;/p&gt;
&lt;p&gt;
&lt;figure class="article-figure"&gt;&lt;img alt="Browser File Dialog" src="images/firefox_file_upload_dialog_small.png"&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Selenium uses JavaScript to simulate clicks, typing and many other manipulation
with a web-page. Unfortunately, when user clicks on the button to save a file
the browser opens an operating system's file dialog. This dialog is not part of
the site or even a browser. As JavaScript is "jailed" by the browser it can't
get access to the external window. There comes the problem. How a test can save
the file (press the save button)?&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#existing-solutions"&gt;Existing Solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#windows-solution-autoit"&gt;Windows Solution - AutoIt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#linux-solution-xdotool"&gt;Linux Solution - xdotool&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h4 id="existing-solutions"&gt;Existing Solutions&lt;/h4&gt;
&lt;p&gt;The first solution came to my mind was to get control over the HTML's &lt;code&gt;input&lt;/code&gt;
tag and set path to the file as I want. When you choose a file the &lt;em&gt;value&lt;/em&gt;
attribute changes to the address of the file. Unfortunately (or not), we can't
just change this attribute from JavaScript. It's forbidden due to security
reasons. If it were possible sites could steal user's private data by setting the
attribute to some sensitive files (for example, passwords, logs). So, it is not
the way. &lt;/p&gt;
&lt;p&gt;The other way around is to use some UI automation tool, in addition to Selenium.
There are some approaches with &lt;a href="https://github.com/pywinauto/pywinauto"&gt;pywuiauto&lt;/a&gt; but this library is Windows
specific.&lt;/p&gt;
&lt;p&gt;Then I turned to Sikuli - quite a nice library for automation of graphical
interfaces. Its main advantage is that it use image processing to find similar
elements (you need to defined via prepared screenshots of the elements). However,
Sikuli is quite big and has its own Pythonic language with dedicated IDE. That's
too complex solution for such a simple task.&lt;/p&gt;
&lt;h4 id="windows-solution-autoit"&gt;Windows Solution - AutoIt&lt;/h4&gt;
&lt;p&gt;After some further search I came across AutoIt - also an automation tool for
graphical user interfaces. What catch my attention was that scripts written for
AutoIt could be simply compiled into standalone executables. That's super
convenient! In result all you get in addition to your test is a &lt;code&gt;.exe&lt;/code&gt; file. The
following listing shows my script for handling file dialog for the most
popular browsers:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6483af6-6cb3-11f0-9645-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6483af6-6cb3-11f0-9645-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;#include &amp;lt;MsgBoxConstants.au3&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;CmdLine&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chrome&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;sTitle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Open&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;ElseIf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;CmdLine&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;edge&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;sTitle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Open&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;ElseIf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;CmdLine&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;firefox&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;sTitle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;File Upload&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;ElseIf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;CmdLine&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ie&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;sTitle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Choose File to Upload&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;Else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;MsgBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;MB_SYSTEMMODAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Unknown browser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Exit&lt;/span&gt;
&lt;span class="n"&gt;EndIf&lt;/span&gt;

&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;
&lt;span class="n"&gt;WinActivate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;sTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;

&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="n"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{ALTDOWN}n{ALTUP}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;CmdLine&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{ALTDOWN}O{ALTUP}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Run it with two arguments: &lt;code&gt;handler.exe firefox C:/path/to/file.txt&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="linux-solution-xdotool"&gt;Linux Solution - xdotool&lt;/h4&gt;
&lt;p&gt;For Linux there exist a tool called &lt;strong&gt;xdotool&lt;/strong&gt;. It is similar to AutoIt but it
only simulate keyboard input, mouse movements and windows manipulation.
However, it is enough to open a file. The following script looks for open file
dialog for Firefox or Chromium browser, switches to that window, types path to
the file and press "Open" button (can be done by a shortcut: ALT+O). &lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b648c5f4-6cb3-11f0-a0a3-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b648c5f4-6cb3-11f0-a0a3-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home/andrew/42.png&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;firefox&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# browser=&amp;quot;chromium&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$browser&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;firefox&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;win_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;File Upload&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$browser&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chromium&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;win_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Open File&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;fi&lt;/span&gt;

&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Looking for the window of the &amp;#39;$browser&amp;#39; browser with name &amp;#39;$win_name&amp;#39;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Find window PID&lt;/span&gt;
&lt;span class="n"&gt;WIN&lt;/span&gt;&lt;span class="o"&gt;=$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xdotool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$browser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;\
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xdotool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getwindowname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$win_name&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;\
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Switch to the window&lt;/span&gt;
&lt;span class="n"&gt;xdotool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;windowactivate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;WIN&lt;/span&gt;

&lt;span class="c1"&gt;# Send file path&lt;/span&gt;
&lt;span class="n"&gt;xdotool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;WIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$file&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Press &amp;quot;Open&amp;quot; button&lt;/span&gt;
&lt;span class="n"&gt;xdotool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;WIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;These are the most elegant solution which I found. Even though it need
additional software it showed itself as simple and reliable way to approach file
dialogs. All the script can be downloaded from the following link:&lt;/p&gt;
&lt;div style="width:300px; text-align:center; margin: 0 auto;"&gt;
&lt;a href="https://alberand.com/materials/handle_file_dialog.tar"&gt;Download scripts&lt;/a&gt;
&lt;/div&gt;

&lt;h5 id="references"&gt;References&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.semicomplete.com/projects/xdotool/"&gt;xdotool webpage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.autoitscript.com/site/autoit/"&gt;AutoIt website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.seleniumhq.org/"&gt;Selenium website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;style&gt;
    h5 {
        font-weight: bold;
    }
&lt;/style&gt;</content><category term="Article"></category><category term="Selenium"></category><category term="testing"></category><category term="AutoIt"></category><category term="xdotool"></category></entry><entry><title>Host only networking set up for QEMU</title><link href="https://alberand.com/host-only-networking-set-up-for-qemu-hypervisor.html" rel="alternate"></link><published>2017-03-24T00:00:00+01:00</published><updated>2020-01-03T00:00:00+01:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2017-03-24:/host-only-networking-set-up-for-qemu-hypervisor.html</id><summary type="html">&lt;p&gt;In this short note I will try to describe how to set up host-only network for QEMU. It means that guest system (run in QEMU) will be in LAN network with a host system (physical machine).&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this short note I will try to describe how to set up host-only network for QEMU
hypervisor. It means that guest system (run in QEMU) will be in LAN network
with a host system (physical machine). I used it for some experiments with SSH 
functionality of a guest system.&lt;/p&gt;
&lt;p&gt;Connection will be establish by virtual bridge and TAP interface. After host
setup you will need to assign IP address to the guest system.&lt;/p&gt;
&lt;p&gt;Firstly, create a bridge on the host machine:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b62333c7-6cb3-11f0-8c4a-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b62333c7-6cb3-11f0-8c4a-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;ip&lt;span class="w"&gt; &lt;/span&gt;link&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;br0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bridge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;If you want to use already created bridge don't forget to clean out IP.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6233ffd-6cb3-11f0-9772-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6233ffd-6cb3-11f0-9772-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;ip&lt;span class="w"&gt; &lt;/span&gt;addr&lt;span class="w"&gt; &lt;/span&gt;flush&lt;span class="w"&gt; &lt;/span&gt;dev&lt;span class="w"&gt; &lt;/span&gt;br0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Assign IP to the bridge.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6234bf4-6cb3-11f0-9ca5-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6234bf4-6cb3-11f0-9ca5-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;ip&lt;span class="w"&gt; &lt;/span&gt;addr&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;.168.100.50/24&lt;span class="w"&gt; &lt;/span&gt;brd&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;.168.100.255&lt;span class="w"&gt; &lt;/span&gt;dev&lt;span class="w"&gt; &lt;/span&gt;br0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Create TAP interface.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b62358f9-6cb3-11f0-abf9-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b62358f9-6cb3-11f0-abf9-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;ip&lt;span class="w"&gt; &lt;/span&gt;tuntap&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;mode&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;user&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;whoami&lt;span class="k"&gt;)&lt;/span&gt;
ip&lt;span class="w"&gt; &lt;/span&gt;tuntap&lt;span class="w"&gt; &lt;/span&gt;show
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Output should contains name of created TAP interface:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b623669b-6cb3-11f0-b6d1-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b623669b-6cb3-11f0-b6d1-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~&lt;span class="w"&gt; &lt;/span&gt;tap0:&lt;span class="w"&gt; &lt;/span&gt;tap&lt;span class="w"&gt; &lt;/span&gt;UNKNOWN_FLAGS:800&lt;span class="w"&gt; &lt;/span&gt;user&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Add TAP interface to the bridge.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6237290-6cb3-11f0-9046-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6237290-6cb3-11f0-9046-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;ip&lt;span class="w"&gt; &lt;/span&gt;link&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tap0&lt;span class="w"&gt; &lt;/span&gt;master&lt;span class="w"&gt; &lt;/span&gt;br0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Make sure everything is up:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6237ebb-6cb3-11f0-bb3c-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6237ebb-6cb3-11f0-bb3c-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;ip&lt;span class="w"&gt; &lt;/span&gt;link&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dev&lt;span class="w"&gt; &lt;/span&gt;br0&lt;span class="w"&gt; &lt;/span&gt;up
sudo&lt;span class="w"&gt; &lt;/span&gt;ip&lt;span class="w"&gt; &lt;/span&gt;link&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;dev&lt;span class="w"&gt; &lt;/span&gt;tap0&lt;span class="w"&gt; &lt;/span&gt;up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Assign IP range to the bridge.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6238d10-6cb3-11f0-bfd9-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6238d10-6cb3-11f0-bfd9-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;dnsmasq&lt;span class="w"&gt; &lt;/span&gt;--interface&lt;span class="o"&gt;=&lt;/span&gt;br0&lt;span class="w"&gt; &lt;/span&gt;--bind-interfaces&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;--dhcp-range&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;.168.100.50,192.168.100.254
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Make sure that interfaces are UP. If not run previously mentioned commands to set
TAP interface up (br0 will change its state automatically). Run Qemu with some
MAC address:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b62399df-6cb3-11f0-8bb9-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b62399df-6cb3-11f0-8bb9-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;qemu&lt;span class="w"&gt; &lt;/span&gt;-device&lt;span class="w"&gt; &lt;/span&gt;e1000,netdev&lt;span class="o"&gt;=&lt;/span&gt;network0,mac&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;:00:00:00:00:00&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;-netdev&lt;span class="w"&gt; &lt;/span&gt;tap,id&lt;span class="o"&gt;=&lt;/span&gt;network0,ifname&lt;span class="o"&gt;=&lt;/span&gt;tap0,script&lt;span class="o"&gt;=&lt;/span&gt;no,downscript&lt;span class="o"&gt;=&lt;/span&gt;no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;In the guest system assign static IP address to the network interface:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b623a826-6cb3-11f0-945f-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b623a826-6cb3-11f0-945f-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ip&lt;span class="w"&gt; &lt;/span&gt;addr&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;.168.100.224/24&lt;span class="w"&gt; &lt;/span&gt;broadcast&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;.168.100.255&lt;span class="w"&gt; &lt;/span&gt;dev&lt;span class="w"&gt; &lt;/span&gt;eth0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Don't forget to add root password:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b623b52b-6cb3-11f0-b052-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b623b52b-6cb3-11f0-b052-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Now you can connect to the Qemu guest system using SSH:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b624bffd-6cb3-11f0-b8c0-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b624bffd-6cb3-11f0-b8c0-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="mf"&gt;@192.168.100.224&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h4 id="troubleshooting"&gt;Troubleshooting&lt;/h4&gt;
&lt;p&gt;If you get an error that tap0 is already in use, possibly, you are trying to run
more than one version of QEMU for one TAP interface. Described configuration is
used only for two peers (host and guest). For multiple connection you need
different configuration.&lt;/p&gt;
&lt;p&gt;As mentioned before make sure that both TAP and Bridge are up.  Otherwise you
will fail to connect via SSH.&lt;/p&gt;
&lt;h4 id="references"&gt;References&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.qemu-project.org/"&gt;QEMU?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/TUN/TAP"&gt;TUN/TAP?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Article"></category><category term="qemu"></category><category term="linux"></category><category term="networking"></category></entry><entry><title>Octave - colored prompt messages</title><link href="https://alberand.com/octave-colored-prompt-messages.html" rel="alternate"></link><published>2016-10-24T00:00:00+02:00</published><updated>2020-01-03T00:00:00+01:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2016-10-24:/octave-colored-prompt-messages.html</id><summary type="html">&lt;p&gt;How to print colorful messages in the Octave prompt using shell escape sequences.&lt;/p&gt;</summary><content type="html">&lt;p&gt;
&lt;figure class="article-figure"&gt;&lt;img alt="Octave Prompt with colors" src="images/octave_messages.png"&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In Unix terminal we can use colorful output for emphasizing important pieces of 
information such as fatal errors or warnings. As a student in the Technical
University I have a lot of problem sets to solve in &lt;a href="https://www.gnu.org/software/octave/doc/v4.0.0/index.html"&gt;Octave&lt;/a&gt;. Its prompt is
similar to the normal Unix terminal (and I suppose it is). To make the output of
my scripts more readable I tried to implement a few function to colorize some
important messages.&lt;/p&gt;
&lt;p&gt;The functions make usage of &lt;strong&gt;fprintf&lt;/strong&gt; function which draw obtained text to the 
standard output or stderr (first argument is the output stream). The second
argument is construction which wraps the message passed as &lt;code&gt;msg&lt;/code&gt; by special so
called ANSI escape sequences. These sequences tells prompt to display text with
some special styling such as color, underline, background color etc.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6333b6b-6cb3-11f0-a9a1-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6333b6b-6cb3-11f0-a9a1-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;% The set of function to print fancy messages in octave prompt. To use it just &lt;/span&gt;
&lt;span class="c"&gt;% call function name and as argument send a message you want to show.&lt;/span&gt;
&lt;span class="c"&gt;% To test it use following commands:&lt;/span&gt;
&lt;span class="c"&gt;% infom(&amp;quot;Information message&amp;quot;); error(&amp;quot;Error message&amp;quot;); &lt;/span&gt;
&lt;span class="c"&gt;% success(&amp;quot;Success message&amp;quot;); head(&amp;quot;This is head message&amp;quot;);&lt;/span&gt;

&lt;span class="c"&gt;% Prevent octave to run it immediately.&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;infom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;msg&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;[94m&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;[0m\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;endfunction&lt;/span&gt;

&lt;span class="s"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;error(msg)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;[91m&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;[0m\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;endfunction&lt;/span&gt;

&lt;span class="s"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;success(msg)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;[32m&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;[0m\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;endfunction&lt;/span&gt;

&lt;span class="s"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;head(msg)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;[90m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;==============================================================&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;========\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;==============================================================&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;========\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;[0m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Background and foreground colors can be changed in the construction shown below.
It consist of escape character &lt;code&gt;^&lt;/code&gt; (or &lt;code&gt;\e&lt;/code&gt;, &lt;code&gt;\033&lt;/code&gt;, &lt;code&gt;\x1B&lt;/code&gt;) and format
code surrounded by the &lt;strong&gt;[&lt;/strong&gt; and &lt;strong&gt;m&lt;/strong&gt; characters. The first number is
responsible for text formatting (normal, bold, dim, underlined...), the second
for background color and third one for foreground color. &lt;/p&gt;
&lt;div style="width: 150px; margin: 0 auto; font-size: 22px; padding: 0px 0px 5px
0px; letter-spacing: 2px;"&gt;
    ^[0;49;30m
&lt;/div&gt;

&lt;p&gt;So, the sequence above means 0 - normal text (all attributes to default), 49 -
default background color and 30 - black text color. You can found more codes at
the &lt;a href="https://misc.flogisoft.com/bash/tip_colors_and_formatting"&gt;following page&lt;/a&gt; and in table below.&lt;/p&gt;
&lt;style&gt;
/* DivTable.com */
.divTable{
    display: table;
    margin: 0 auto;
    border-top: 1px #DEDEDE solid;
    border-bottom: 1px #DEDEDE solid;
    margin-top: 10px;
    margin-bottom: 10px;
}

.divTableRow {
    display: table-row;
}
.divTableHeading {
    display: table-header-group;
    background-color: #EEE;
    font-weight: bold;
}

.divTableCell, .divTableHead {
    display: table-cell;
    padding: 3px 10px;
}

.divTableHead {
    border-bottom: 1px #DEDEDE solid
}

.divTableBody {
    display: table-row-group;
};
&lt;/style&gt;

&lt;div class="divTable"&gt;
&lt;div class="divTableBody"&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableHead"&gt;Code&lt;/div&gt;
&lt;div class="divTableHead"&gt;Color&lt;/div&gt;
&lt;div class="divTableHead"&gt;Preview&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;39&lt;/div&gt;
&lt;div class="divTableCell"&gt;Default&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Colors in the bash" src="./images/bash_colors/39.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;30&lt;/div&gt;
&lt;div class="divTableCell"&gt;Black&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Exapmle of colors in bash" src="./images/bash_colors/30.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;31&lt;/div&gt;
&lt;div class="divTableCell"&gt;Red&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Example of colorful output in bash" src="./images/bash_colors/31.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;32&lt;/div&gt;
&lt;div class="divTableCell"&gt;Green&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Example of colorful output in bash" src="./images/bash_colors/32.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;33&lt;/div&gt;
&lt;div class="divTableCell"&gt;Yellow&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Example of colorful output in bash" src="./images/bash_colors/33.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;34&lt;/div&gt;
&lt;div class="divTableCell"&gt;Blue&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Example of colorful output in bash" src="./images/bash_colors/34.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;35&lt;/div&gt;
&lt;div class="divTableCell"&gt;Magenta&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Example of colorful output in bash" src="./images/bash_colors/35.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;36&lt;/div&gt;
&lt;div class="divTableCell"&gt;Cyan&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Example of colorful output in bash" src="./images/bash_colors/36.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;37&lt;/div&gt;
&lt;div class="divTableCell"&gt;Light Gray&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Example of colorful output in bash" src="./images/bash_colors/37.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;90&lt;/div&gt;
&lt;div class="divTableCell"&gt;Dark Gray&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Example of colorful output in bash" src="./images/bash_colors/90.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;91&lt;/div&gt;
&lt;div class="divTableCell"&gt;Light Red&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Example of colorful output in bash" src="./images/bash_colors/91.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;92&lt;/div&gt;
&lt;div class="divTableCell"&gt;Light Green&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Example of colorful output in bash" src="./images/bash_colors/92.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;93&lt;/div&gt;
&lt;div class="divTableCell"&gt;Light Yellow&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Example of colorful output in bash" src="./images/bash_colors/93.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;94&lt;/div&gt;
&lt;div class="divTableCell"&gt;Light Blue&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Example of colorful output in bash" src="./images/bash_colors/94.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;95&lt;/div&gt;
&lt;div class="divTableCell"&gt;Light Magenta&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Example of colorful output in bash" src="./images/bash_colors/95.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;96&lt;/div&gt;
&lt;div class="divTableCell"&gt;Light Cyan&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Example of colorful output in bash" src="./images/bash_colors/96.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="divTableRow"&gt;
&lt;div class="divTableCell"&gt;97&lt;/div&gt;
&lt;div class="divTableCell"&gt;White&lt;/div&gt;
&lt;div class="divTableCell"&gt;
  &lt;img alt="Example of colorful output in bash" src="./images/bash_colors/97.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;How to use it? It's easy enough, all you need to do are few follow steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the script&lt;/li&gt;
&lt;li&gt;Create directory where you will store this script for further usage&lt;/li&gt;
&lt;li&gt;Then in your Octave's config (by default it should be &lt;code&gt;~/.octaverc&lt;/code&gt; on Linux
   system) add and don't forgot to change next commands:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6337007-6cb3-11f0-b5a2-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6337007-6cb3-11f0-b5a2-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Change to address where your script is&lt;/span&gt;
addpath&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home/andrew/Documents/Octave/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
messages
PAGER_FLAGS&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-r&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;First line adds your directory to the global search. So, when you want to run
this script you can just type in the Octave prompt &lt;code&gt;messages&lt;/code&gt; and this script 
will be run.&lt;/p&gt;
&lt;p&gt;Second line runs this script. Because this configuration file (&lt;code&gt;.octaverc&lt;/code&gt;) is 
run at the startup of the Octave this script will be automatically executed.
Last command add parameter to &lt;code&gt;less&lt;/code&gt; program which is used when output of your
script isn't suitable for one screen of the terminal. This parameter is needed
to correctly display colors while you see output over the &lt;code&gt;less&lt;/code&gt; program.&lt;/p&gt;
&lt;h4 id="references"&gt;References:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/octave/doc/v4.0.0/index.html"&gt;Octave Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://misc.flogisoft.com/bash/tip_colors_and_formatting"&gt;Bash colors and
  formatting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Article"></category><category term="Octave"></category><category term="colored messages"></category><category term="colored prompt"></category></entry><entry><title>Latex - Nice color boxes</title><link href="https://alberand.com/latex-bootstrap-code.html" rel="alternate"></link><published>2016-08-11T00:00:00+02:00</published><updated>2020-01-03T00:00:00+01:00</updated><author><name>Andrey Albershtein</name></author><id>tag:alberand.com,2016-08-11:/latex-bootstrap-code.html</id><summary type="html">&lt;p&gt;How to create nice text highlighting in Latex document&lt;/p&gt;</summary><content type="html">&lt;p&gt;Do you like those little highlighting for commands, files, code snippets and
other stuff used on the sites with Bootstrap framework? I think it's really good
for emphasizing key points in your text especially in technical writing. For
example, look at this paragraph taken from one of my documentation PDFs.&lt;/p&gt;
&lt;p&gt;
&lt;figure class="article-figure"&gt;&lt;img alt="Screenshot of PDF document with Bootstrap highlighting" src="images/latex_pdf_bcode_example.png"&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;There is not too many default text decoration styles to play with to emphasize
something in Latex. Most of the times the standard &lt;strong&gt;bold&lt;/strong&gt; and &lt;em&gt;italic&lt;/em&gt; are
used. In my opinion that isn't enough and those two methods attract less
attention than fancy colorful highlightings. Try to look at some articles while
scrolling, you will see that the eye immediately catch those little red boxes.&lt;/p&gt;
&lt;p&gt;I wrote a function for Latex, which implements this type of highlighting. All you
need to do is just add the following code to your Latex document.&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b6382fb8-6cb3-11f0-9b67-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b6382fb8-6cb3-11f0-9b67-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;% Include package for drawing color boxes&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tcolorbox&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% Define colors&lt;/span&gt;
&lt;span class="k"&gt;\definecolor&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;codeBg&lt;span class="nb"&gt;}{&lt;/span&gt;rgb&lt;span class="nb"&gt;}{&lt;/span&gt;0.976, 0.949, 0.956&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\definecolor&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;codeColor&lt;span class="nb"&gt;}{&lt;/span&gt;rgb&lt;span class="nb"&gt;}{&lt;/span&gt;0.780, 0.145, 0.305&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% Define new command&lt;/span&gt;
&lt;span class="k"&gt;\newtcbox&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\bCode&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;
    nobeforeafter,
    fontupper=&lt;span class="k"&gt;\color&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;codeColor&lt;span class="nb"&gt;}&lt;/span&gt;,
    colframe=codeBg,
    colback=codeBg,
    boxrule=0.1pt,
    arc=3pt,
    boxsep=0pt,
    left=3pt,
    right=3pt,
    top=3pt,
    bottom=4pt,
    tcbox raise base&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Depending on your document settings, sometimes, you will need to change paddings 
of the box (left/right/top/bottom) to make it symmetric.&lt;/p&gt;
&lt;p&gt;This function can be easily used with a &lt;code&gt;\bCode{your code}&lt;/code&gt; command.&lt;/p&gt;
&lt;h4 id="references"&gt;References:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://getbootstrap.com/"&gt;Bootstrap?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.latex-project.org/"&gt;Latex?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Article"></category><category term="Latex"></category><category term="Bootstrap"></category><category term="code snippet"></category></entry><entry><title>Latex - Выделение в стиле Bootstrap</title><link href="https://alberand.com/latex-bootstrap-code-ru.html" rel="alternate"></link><published>2016-08-11T00:00:00+02:00</published><updated>2016-08-11T00:00:00+02:00</updated><author><name>Aндрей Альберштейн</name></author><id>tag:alberand.com,2016-08-11:/latex-bootstrap-code-ru.html</id><summary type="html">&lt;p&gt;Если вам как и мне нравится эта красивая Bootstrap подсветка команд, файлов,
кода, да чего угодно то это довольно легко можно реализовать для документов
написанных с помощью Latex. Как по мне это куда более контрастное выделение
информации нежели с помощью курсива или жирного шрифта.&lt;/p&gt;
&lt;div style="margin: 20px 0;"&gt;
    &lt;img class="image" alt="Screenshot of PDF document with Bootstrap highlighting" src="https://alberand.com/images/latex_pdf_bcode_example.png"&gt;
&lt;/div&gt;

&lt;p&gt;Я написал функцию для Latex, которая …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Если вам как и мне нравится эта красивая Bootstrap подсветка команд, файлов,
кода, да чего угодно то это довольно легко можно реализовать для документов
написанных с помощью Latex. Как по мне это куда более контрастное выделение
информации нежели с помощью курсива или жирного шрифта.&lt;/p&gt;
&lt;div style="margin: 20px 0;"&gt;
    &lt;img class="image" alt="Screenshot of PDF document with Bootstrap highlighting" src="https://alberand.com/images/latex_pdf_bcode_example.png"&gt;
&lt;/div&gt;

&lt;p&gt;Я написал функцию для Latex, которая предоставляет подобную подсветку. Её очень
легко использовать, единственное что нужно это добавить следующий кусок кода в
свой документ:&lt;/p&gt;
&lt;p&gt;
            &lt;div  class="highlight"  id="code-b616f3da-6cb3-11f0-801e-8990e32368c1"&gt;
                &lt;button
                  type="button"
                  class="copy-code-button"
                  onclick="copy_to_clipboard(document.getElementById('code-b616f3da-6cb3-11f0-801e-8990e32368c1').getElementsByTagName('code')[0])"&gt;
                    copy
                &lt;/button&gt;
        &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;% Include package for drawing color boxes&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tcolorbox&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% Define colors&lt;/span&gt;
&lt;span class="k"&gt;\definecolor&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;codeBg&lt;span class="nb"&gt;}{&lt;/span&gt;rgb&lt;span class="nb"&gt;}{&lt;/span&gt;0.976, 0.949, 0.956&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\definecolor&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;codeColor&lt;span class="nb"&gt;}{&lt;/span&gt;rgb&lt;span class="nb"&gt;}{&lt;/span&gt;0.780, 0.145, 0.305&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% Define new command&lt;/span&gt;
&lt;span class="k"&gt;\newtcbox&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\bCode&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;
    nobeforeafter,
    fontupper=&lt;span class="k"&gt;\color&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;codeColor&lt;span class="nb"&gt;}&lt;/span&gt;,
    colframe=codeBg,
    colback=codeBg,
    boxrule=0.1pt,
    arc=3pt,
    boxsep=0pt,
    left=3pt,
    right=3pt,
    top=3pt,
    bottom=4pt,
    tcbox raise base&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;В зависимости от параметров вашего документа цветная обводка может быть
чуть-чуть не симметрична с одной из сторон. Но это легко можно подкорректировать с
помощью параметров &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt; и &lt;code&gt;bottom&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Выделить текст можно следующим образом &lt;code&gt;\bCode{ваш код\текст}&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id="_1"&gt;Источники:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://getbootstrap.com/"&gt;Bootstrap?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.latex-project.org/"&gt;Latex?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Article"></category><category term="Latex"></category><category term="Bootstrap"></category><category term="code snippet"></category></entry></feed>